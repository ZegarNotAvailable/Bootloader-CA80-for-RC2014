// Fragmenty kodu skopiowane z oprogramowania A040618 (Z80-MBC2) autor J4F (Just For Fun)
// Na pewno mozliwe jest uproszczenie / skasowanie nieuzywanych zmiennych, stałych i innych definicji.
// CA80 monitor pobrany z https://www.elektroda.pl/rtvforum/download.php?id=831817
// programu jest pusta. Generowany jest tylko CLK.
// Po przesłaniu monitora do RAM, Z80 jest resetowany i po 5 ms sygnał SNMI_ wlacza przerwania niemaskowalne.
// Dobrej zabawy!!!
// Zegar @ microgeek.eu


#include <Wire.h>

// ------------------------------------------------------------------------------
//
// Hardware definitions like(Z80-MBC2)
//
// ------------------------------------------------------------------------------

#define   D0            24    // PA0 pin 40   Z80 data bus
#define   D1            25    // PA1 pin 39
#define   D2            26    // PA2 pin 38
#define   D3            27    // PA3 pin 37
#define   D4            28    // PA4 pin 36
#define   D5            29    // PA5 pin 35
#define   D6            30    // PA6 pin 34
#define   D7            31    // PA7 pin 33

#define   AD0           18    // PC2 pin 24   Z80 A0
#define   WR_           19    // PC3 pin 25   Z80 WR
#define   RD_           20    // PC4 pin 26   Z80 RD
#define   MREQ_         21    // PC5 pin 27   Z80 MREQ
#define   RESET_        22    // PC6 pin 28   Z80 RESET
#define   MCU_RTS_      23    // PC7 pin 29   * RESERVED - NOT USED *
#define   MCU_CTS_      10    // PD2 pin 16   * RESERVED - NOT USED *
#define   WAIT_EN       11    // PD3 pin 17   
//#define   BANK1         11    // PD3 pin 17   RAM Memory bank address (High)
#define   NMI           12    // PD4 pin 18   NMI generowane przez TIMER1
#define   INT_           1    // PB1 pin 2    Z80 control bus
#define   RAM_CE2        2    // PB2 pin 3    RAM Chip Enable (CE2). Active HIGH. Used only during boot
#define   WAIT_          3    // PB3 pin 4    Z80 WAIT
#define   SS_            4    // PB4 pin 5    SD SPI
#define   MOSI           5    // PB5 pin 6    SD SPI
#define   MISO           6    // PB6 pin 7    SD SPI
#define   SCK            7    // PB7 pin 8    SD SPI
#define   BUSREQ_       14    // PD6 pin 20   Z80 BUSRQ
#define   CLK           15    // PD7 pin 21   Z80 CLK
#define   SCL_PC0       16    // PC0 pin 22   IOEXP connector (I2C)
#define   SDA_PC1       17    // PC1 pin 23   IOEXP connector (I2C)
#define   LED_IOS        0    // PB0 pin 1    Led LED_IOS is ON if HIGH
#define   WAIT_RES_      0    // PB0 pin 1    Reset the Wait FF
#define   USER          13    // PD5 pin 19   Led USER and key (led USER is ON if LOW)
#define   DS3231_RTC    0x68  // DS3231 I2C address
#define   DS3231_SECRG  0x00  // DS3231 Seconds Register
#define   DS3231_STATRG 0x0F  // DS3231 Status Register
#define   CA80_SEC     0xFFED // Zegar CA80

// ------------------------------------------------------------------------------
//
// Atmega clock speed check
//
// ------------------------------------------------------------------------------

#if F_CPU == 20000000
#define CLOCK_LOW   "5"
#define CLOCK_HIGH  "10"
#else
#define CLOCK_LOW   "4"
#define CLOCK_HIGH  "8"
#endif

// ------------------------------------------------------------------------------
//
//  Libraries
//
// ------------------------------------------------------------------------------

#include <avr/pgmspace.h>                 // Needed for PROGMEM
#include <EEPROM.h>                       // Needed for internal EEPROM R/W
// ------------------------------------------------------------------------------
//
//  Constants
//
// ------------------------------------------------------------------------------

const byte    LD_HL        =  0x36;       // Opcode of the Z80 instruction: LD(HL), n
const byte    INC_HL       =  0x23;       // Opcode of the Z80 instruction: INC HL
const byte    LD_HLnn      =  0x21;       // Opcode of the Z80 instruction: LD HL, nn
const byte    JP_nn        =  0xC3;       // Opcode of the Z80 instruction: JP nn
const byte    debug        = 1;           // Debug off = 0, on = 1, on = 2 with interrupt trace
const byte    bootModeAddr = 10;          // Internal EEPROM address for boot mode storage
const byte    autoexecFlagAddr = 12;      // Internal EEPROM address for AUTOEXEC flag storage
const byte    clockModeAddr = 13;         // Internal EEPROM address for the Z80 clock high/low speed switch
//  (1 = low speed, 0 = high speed)
// Z80 programs images into flash and related constants
const word  boot_A_StrAddr = 0x0;      // Payload A image starting address (flash)
const byte  boot_A_[] PROGMEM =
{ // Payload CA80 image
  0x00, 0x00, 0x00, 0x00, 0xC3, 0x56, 0x01, 0xEF, 0xC5, 0xCD, 0xC6, 0xFF,
  0xF5, 0x4F, 0x18, 0x2B, 0xEF, 0xC5, 0x0E, 0x00, 0x06, 0x08, 0x18, 0x29,
  0x4F, 0xEF, 0x79, 0xE5, 0xD5, 0xC3, 0x0D, 0x01, 0xEF, 0x7D, 0xCD, 0x1B,
  0x00, 0x7C, 0x18, 0x20, 0xE5, 0xD5, 0x21, 0x06, 0x00, 0x39, 0x18, 0x25,
  0xF3, 0xC3, 0xC9, 0xFF, 0x79, 0x50, 0x50, 0xFF, 0xC3, 0xCF, 0xFF, 0xCD,
  0xE1, 0x01, 0xF1, 0xC1, 0xC9, 0xCD, 0xAC, 0x01, 0x10, 0xFB, 0xC1, 0xC9,
  0xE5, 0x2A, 0xC1, 0xFF, 0x34, 0x34, 0xCD, 0x1B, 0x00, 0x35, 0x35, 0xE1,
  0xC9, 0x5E, 0x23, 0x56, 0x1A, 0x13, 0x72, 0x2B, 0x73, 0x2A, 0xC1, 0xFF,
  0x77, 0xD1, 0xE1, 0xC9, 0x85, 0xC9, 0xF5, 0xE5, 0xD5, 0xC5, 0x21, 0xE8,
  0xFF, 0xAF, 0xBE, 0x28, 0x01, 0x35, 0x23, 0xBE, 0x28, 0x03, 0x35, 0xD3,
  0xEC, 0x23, 0x35, 0x3A, 0xB4, 0xFF, 0xB7, 0x28, 0x41, 0x23, 0x11, 0x28,
  0x03, 0x06, 0x05, 0xEB, 0x1A, 0x3C, 0x27, 0xBE, 0xEB, 0x20, 0x32, 0xAF,
  0x77, 0x13, 0x23, 0x10, 0xF2, 0x35, 0x20, 0x02, 0x36, 0x07, 0x23, 0x23,
  0x7E, 0xFE, 0x0A, 0x38, 0x02, 0xD6, 0x06, 0x3D, 0x83, 0x5F, 0x1A, 0x57,
  0x2B, 0x7E, 0x3C, 0x27, 0xBA, 0x38, 0x12, 0x3E, 0x01, 0x77, 0x23, 0x7E,
  0x3C, 0x27, 0xFE, 0x13, 0x38, 0x07, 0x3E, 0x01, 0x77, 0x23, 0x7E, 0x3C,
  0x27, 0x77, 0x21, 0xF5, 0xFF, 0x7E, 0xC6, 0x20, 0x77, 0x23, 0x23, 0xE6,
  0xE0, 0x47, 0x3E, 0xFF, 0xD3, 0xF1, 0xDB, 0xF2, 0xE6, 0x1F, 0xB0, 0x4F,
  0xD3, 0xF2, 0x78, 0x07, 0x07, 0x07, 0x85, 0x6F, 0x7E, 0x2F, 0xD3, 0xF1,
  0x79, 0xF6, 0x0F, 0xE6, 0xFE, 0xD3, 0xF2, 0xDB, 0xF0, 0x0F, 0xE6, 0x3F,
  0xFE, 0x3E, 0x79, 0xD3, 0xF2, 0xCA, 0x2F, 0x05, 0xC1, 0xCD, 0xCC, 0xFF,
  0xD1, 0xE1, 0xF1, 0xED, 0x45, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0x2A, 0xC1, 0xFF, 0x7E, 0x57, 0xE6,
  0x0F, 0xC6, 0x10, 0x77, 0x7B, 0xE6, 0x0F, 0x4F, 0xCD, 0xE1, 0x01, 0x7B,
  0x0F, 0x0F, 0x0F, 0x0F, 0xE6, 0x0F, 0x4F, 0x34, 0xCD, 0xE1, 0x01, 0x72,
  0x7B, 0xD1, 0xE1, 0xC9, 0xE5, 0xC5, 0x2E, 0x04, 0x2D, 0xFA, 0x6C, 0x01,
  0x7D, 0x07, 0xD3, 0xF3, 0xDB, 0xF0, 0x0F, 0xE6, 0x3F, 0x67, 0x7D, 0x07,
  0x3C, 0xD3, 0xF3, 0x7C, 0xFE, 0x3F, 0x28, 0xE8, 0x7D, 0x0F, 0x0F, 0xB4,
  0xC1, 0xE1, 0x18, 0x09, 0xFF, 0xFF, 0x3E, 0x90, 0xD3, 0xF3, 0xC3, 0x41,
  0x02, 0xE5, 0xC5, 0x21, 0x00, 0x03, 0x06, 0x18, 0xBE, 0x37, 0x28, 0x04,
  0x23, 0x10, 0xF9, 0xB7, 0x7D, 0xC1, 0xE1, 0xC9, 0xCD, 0x13, 0x02, 0x40,
  0xD1, 0xE1, 0xE5, 0x19, 0xCD, 0x20, 0x00, 0x44, 0xE1, 0xB7, 0xED, 0x52,
  0xCD, 0x20, 0x00, 0x40, 0xE5, 0x21, 0xE8, 0xFF, 0x36, 0x14, 0x7E, 0xB7,
  0x20, 0xFC, 0xCD, 0xC3, 0xFF, 0x38, 0xF5, 0x36, 0x14, 0x7E, 0xB7, 0x20,
  0xFC, 0xCD, 0xC3, 0xFF, 0x30, 0xF5, 0x23, 0x36, 0x32, 0xE1, 0xFE, 0x11,
  0xC8, 0xFE, 0x12, 0x37, 0xC8, 0x3F, 0xC9, 0xEF, 0xE5, 0xC5, 0x2A, 0xC1,
  0xFF, 0x4E, 0x79, 0x0F, 0x0F, 0x0F, 0x0F, 0xE6, 0x0F, 0x47, 0x28, 0x35,
  0x79, 0xE6, 0x0F, 0x80, 0xFE, 0x09, 0x30, 0x2D, 0x85, 0x6F, 0x05, 0x28,
  0x07, 0x2B, 0x7E, 0x23, 0x77, 0x2B, 0x18, 0xF6, 0xC1, 0x71, 0xE1, 0xC9,
  0xEF, 0x7E, 0xFE, 0xFF, 0xC8, 0x4F, 0xCD, 0xAC, 0x01, 0x23, 0x18, 0xF5,
  0xEF, 0xE5, 0xC5, 0x21, 0x18, 0x03, 0x79, 0xFE, 0x10, 0x30, 0x06, 0x85,
  0x6F, 0x4E, 0xCD, 0xAC, 0x01, 0xC1, 0xE1, 0xC9, 0xEF, 0xCF, 0x28, 0xFD,
  0x21, 0x00, 0x00, 0xF5, 0xFE, 0x10, 0x30, 0x0A, 0xF1, 0x29, 0x29, 0x29,
  0x29, 0xB5, 0x6F, 0xCF, 0x18, 0xF1, 0xF1, 0x20, 0xFA, 0xF5, 0xCD, 0x11,
  0x00, 0xF1, 0xC9, 0xEF, 0xCD, 0xF5, 0x01, 0xE3, 0xE5, 0x0D, 0x28, 0x0E,
  0x30, 0xF6, 0xC5, 0x0E, 0x08, 0xCD, 0xAC, 0x01, 0xC1, 0xE1, 0xE3, 0x0C,
  0x18, 0xEA, 0xD8, 0x18, 0xF1, 0x7E, 0xDF, 0x20, 0x23, 0x7E, 0xDF, 0x23,
  0x23, 0x7E, 0xDF, 0x26, 0x2B, 0x2B, 0xC9, 0x23, 0x7B, 0x95, 0x7A, 0x9C,
  0xC9, 0x31, 0x8D, 0xFF, 0x21, 0x02, 0x06, 0x11, 0xD1, 0xFF, 0x01, 0x3B,
  0x00, 0xED, 0xB8, 0x3E, 0xFF, 0xED, 0x47, 0xED, 0x56, 0x3E, 0xD0, 0xD3,
  0xF8, 0x3E, 0x07, 0xD3, 0xF9, 0x3E, 0xFA, 0xD3, 0xF9, 0xED, 0x5E, 0xDB,
  0xF0, 0x0F, 0xDA, 0xBE, 0xFF, 0x18, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x31, 0x8D, 0xFF, 0xD7, 0x80, 0x21, 0x39, 0x03, 0xCD, 0xD4, 0x01, 0x40,
  0xCD, 0xBD, 0x05, 0xCD, 0x07, 0x00, 0x17, 0x5F, 0xFE, 0x11, 0xF2, 0x87,
  0x04, 0xFE, 0x10, 0x20, 0x06, 0x0E, 0x3D, 0xCD, 0xAB, 0x01, 0x17, 0xD7,
  0x70, 0x01, 0x70, 0x02, 0xC5, 0x0E, 0x02, 0x21, 0xA7, 0x02, 0x16, 0x00,
  0x19, 0x19, 0x5E, 0x23, 0x56, 0xEB, 0xE9, 0xC9, 0x02, 0xDC, 0x02, 0xED,
  0x02, 0xB4, 0x04, 0x1D, 0x06, 0x74, 0x06, 0x14, 0x07, 0xCB, 0x04, 0xB5,
  0xFF, 0xDE, 0x04, 0x70, 0x01, 0xFF, 0x04, 0x3E, 0x03, 0x72, 0x03, 0x97,
  0x03, 0xAE, 0x03, 0x66, 0x04, 0x21, 0xED, 0xFF, 0xCD, 0x2D, 0x02, 0xCD,
  0xC3, 0xFF, 0x30, 0xF5, 0x21, 0xF1, 0xFF, 0xCD, 0x2D, 0x02, 0x18, 0xF3,
  0x0C, 0xCD, 0x13, 0x02, 0x20, 0x21, 0xED, 0xFF, 0xC1, 0x71, 0x23, 0xC1,
  0x71, 0xC1, 0x23, 0x71, 0xC9, 0x0E, 0x04, 0xCD, 0x13, 0x02, 0x20, 0x21,
  0xF0, 0xFF, 0xC1, 0x71, 0x23, 0x18, 0xE9, 0xCD, 0x94, 0x03, 0x18, 0x3F,
  0xFB, 0xEF, 0xFD, 0xDF, 0xBB, 0xAF, 0xBD, 0x9F, 0x7B, 0x6F, 0x7D, 0x5F,
  0x3B, 0x2F, 0x3D, 0x1F, 0x7E, 0xBE, 0xFE, 0x3E, 0xF7, 0xB7, 0x77, 0x37,
  0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C,
  0x39, 0x5E, 0x79, 0x71, 0x05, 0x00, 0x60, 0x60, 0x24, 0x32, 0x29, 0x32,
  0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x39, 0x77, 0x7F,
  0x3F, 0xFF, 0xF1, 0x2A, 0xA9, 0xFF, 0xD7, 0x70, 0xE7, 0x43, 0x7E, 0xDF,
  0x20, 0xCF, 0x20, 0x21, 0x30, 0xAD, 0x21, 0xD3, 0xF4, 0x22, 0xA2, 0xFF,
  0x21, 0x46, 0x05, 0x22, 0xD0, 0xFF, 0x21, 0xEA, 0xFF, 0x7E, 0xBE, 0x28,
  0xFD, 0x3E, 0x87, 0xD3, 0xF8, 0x3E, 0x0A, 0xD3, 0xF8, 0x00, 0xC3, 0xAB,
  0x04, 0xCD, 0xAE, 0x03, 0x18, 0xCD, 0xCD, 0xF4, 0x01, 0x40, 0xE7, 0x43,
  0x7E, 0xDF, 0x20, 0xCF, 0x38, 0x16, 0x2B, 0x28, 0xF5, 0x23, 0xFE, 0x10,
  0xD0, 0x4F, 0xD7, 0x20, 0xCD, 0xE1, 0x01, 0x79, 0xEB, 0xCD, 0xF8, 0x01,
  0xEB, 0x73, 0x30, 0xEA, 0x23, 0x18, 0xDF, 0x0C, 0xCD, 0x13, 0x02, 0x40,
  0xC1, 0xD1, 0xE1, 0x71, 0xCD, 0x3B, 0x02, 0x30, 0xFA, 0xC9, 0xFE, 0x04,
  0x30, 0x2F, 0x1F, 0x78, 0x17, 0x12, 0xD7, 0x70, 0x21, 0x2E, 0x04, 0x11,
  0x91, 0xFF, 0x06, 0x08, 0x1A, 0xE6, 0xD7, 0x17, 0x30, 0x06, 0x4E, 0xF5,
  0xCD, 0xAC, 0x01, 0xF1, 0x23, 0x10, 0xF4, 0x1A, 0x17, 0x17, 0x4F, 0x1A,
  0x1F, 0x47, 0xCF, 0xFE, 0x02, 0x30, 0xD3, 0x1F, 0x79, 0x1F, 0x1F, 0x18,
  0xD4, 0x57, 0xD7, 0x70, 0x4A, 0xCD, 0xE0, 0x01, 0x15, 0x7A, 0x21, 0x36,
  0x04, 0x01, 0x0C, 0x00, 0xED, 0xB1, 0x20, 0x05, 0x4E, 0xCD, 0xAB, 0x01,
  0x15, 0x7A, 0x21, 0x3F, 0x04, 0x0E, 0x0D, 0x23, 0x23, 0x23, 0x0D, 0xC8,
  0xBE, 0x20, 0xF8, 0xCD, 0x1D, 0x04, 0xCF, 0xD8, 0x20, 0xD3, 0xD7, 0x40,
  0x04, 0x20, 0x02, 0xD7, 0x20, 0xCD, 0xF5, 0x01, 0xD0, 0x7D, 0x12, 0x05,
  0xFA, 0x1A, 0x04, 0x13, 0x7C, 0x12, 0xCF, 0x18, 0xBC, 0x16, 0xFF, 0x23,
  0x5E, 0x23, 0x46, 0x1A, 0xDF, 0x20, 0x05, 0xF8, 0x13, 0x1A, 0xDF, 0x22,
  0x1B, 0xC9, 0x6D, 0x5C, 0x00, 0x76, 0x00, 0x73, 0x54, 0x39, 0x05, 0x6B,
  0x06, 0x72, 0x07, 0x6D, 0x08, 0x76, 0x09, 0x38, 0x10, 0x73, 0x0A, 0x92,
  0x00, 0x0B, 0x90, 0x00, 0x0C, 0x8F, 0x00, 0x0D, 0x8E, 0x00, 0x0E, 0x8D,
  0x00, 0x0F, 0x91, 0x00, 0x08, 0xA6, 0x00, 0x09, 0xA5, 0x00, 0x10, 0xA9,
  0x01, 0x07, 0x97, 0x01, 0x05, 0x93, 0x01, 0x06, 0x95, 0x01, 0xF1, 0xCD,
  0x07, 0x00, 0x40, 0x28, 0x06, 0xCD, 0xF8, 0x01, 0x22, 0xA9, 0xFF, 0x38,
  0x34, 0x0E, 0x40, 0xCD, 0xAB, 0x01, 0x14, 0x06, 0x02, 0xCD, 0xF4, 0x01,
  0x40, 0xE5, 0x05, 0x38, 0x11, 0x20, 0xF6, 0x31, 0x8D, 0xFF, 0xD7, 0x80,
  0x21, 0x34, 0x00, 0xCD, 0xD4, 0x01, 0x35, 0xC3, 0x75, 0x02, 0x21, 0xAB,
  0xFF, 0xD1, 0x73, 0x23, 0x72, 0x23, 0x1A, 0x77, 0x3E, 0xF7, 0x12, 0x23,
  0x78, 0x04, 0xB7, 0x28, 0xF0, 0xD7, 0x80, 0xAF, 0x32, 0xB3, 0xFF, 0xD3,
  0xFC, 0xC3, 0x99, 0xFF, 0xCF, 0x30, 0xD0, 0x31, 0x8D, 0xFF, 0xD1, 0xC1,
  0xF1, 0x2A, 0xA5, 0xFF, 0x08, 0xD9, 0x22, 0xA5, 0xFF, 0xF5, 0xC5, 0xD5,
  0xC3, 0x70, 0x02, 0xD7, 0x40, 0xCF, 0xDA, 0x00, 0x00, 0xFE, 0x10, 0x30,
  0xB2, 0xCD, 0xF8, 0x01, 0x30, 0xAD, 0x22, 0xB1, 0xFF, 0xC9, 0xCD, 0x13,
  0x02, 0x40, 0x01, 0x00, 0x40, 0xE1, 0xD1, 0x7A, 0xB7, 0x20, 0x01, 0x7B,
  0xED, 0xB1, 0xE0, 0x7A, 0xB7, 0x28, 0x04, 0x7B, 0xBE, 0x20, 0xF0, 0x2B,
  0xD5, 0xCD, 0x76, 0x03, 0x23, 0x18, 0xE7, 0x0C, 0xCD, 0x13, 0x02, 0x40,
  0xC1, 0xE1, 0xD1, 0xB7, 0xE5, 0xED, 0x52, 0xDA, 0x87, 0x04, 0xE3, 0xE5,
  0xD5, 0xED, 0x42, 0x38, 0x11, 0xE1, 0xE5, 0xED, 0x42, 0x30, 0x0B, 0xE1,
  0xD1, 0xE1, 0xE5, 0x09, 0xEB, 0xC1, 0x03, 0xED, 0xB8, 0xC9, 0xE1, 0x59,
  0x50, 0xC1, 0xC1, 0x03, 0xED, 0xB0, 0xC9, 0xF3, 0x21, 0xFD, 0x05, 0x11,
  0xCC, 0xFF, 0x01, 0x0C, 0x00, 0xED, 0xB8, 0x3A, 0xB3, 0xFF, 0xB7, 0xC2,
  0x70, 0x02, 0xC1, 0xD1, 0xE1, 0xF1, 0xE5, 0xD5, 0xC5, 0xF5, 0xDD, 0xE5,
  0xFD, 0xE5, 0x11, 0x99, 0xFF, 0x7A, 0x32, 0xB3, 0xFF, 0x21, 0x0E, 0x00,
  0x39, 0xEB, 0x06, 0x06, 0x2B, 0x72, 0x2B, 0x73, 0xD1, 0x10, 0xF9, 0xC1,
  0xF9, 0x2E, 0xA5, 0x73, 0x23, 0x72, 0x0B, 0x2E, 0xAB, 0x16, 0x02, 0x7E,
  0xA9, 0x23, 0x20, 0x04, 0x7E, 0xA8, 0x28, 0x06, 0x23, 0x23, 0x15, 0x20,
  0xF2, 0x03, 0x2E, 0xA9, 0x71, 0x23, 0x70, 0x1E, 0x02, 0x23, 0x4E, 0xAF,
  0x77, 0x23, 0x46, 0x77, 0x23, 0x7E, 0x02, 0x23, 0x1D, 0x20, 0xF3, 0x7A,
  0xCD, 0xBD, 0x05, 0x7A, 0xB7, 0x20, 0x17, 0x3A, 0xA2, 0xFF, 0xB7, 0xCA,
  0x70, 0x02, 0x3E, 0x03, 0xD3, 0xF8, 0x21, 0x00, 0x00, 0x22, 0xA2, 0xFF,
  0x21, 0x3F, 0x03, 0xE5, 0xED, 0x4D, 0x21, 0xFE, 0xFF, 0xCB, 0xFE, 0xCD,
  0x84, 0x01, 0xC3, 0x70, 0x02, 0x32, 0xE7, 0xFF, 0xDB, 0xF0, 0xE6, 0x01,
  0xC8, 0xC3, 0xBB, 0xFF, 0x66, 0xFF, 0xD1, 0xC1, 0xF1, 0xDD, 0xE1, 0xFD,
  0xE1, 0xE1, 0xF9, 0x00, 0x00, 0x21, 0x00, 0xC1, 0xFB, 0xC3, 0x00, 0xC0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x25, 0xFF, 0xFF, 0xC3, 0x00,
  0x08, 0xC3, 0x87, 0x04, 0xC3, 0x06, 0x08, 0xC3, 0x03, 0x08, 0xF6, 0xFF,
  0xC3, 0x30, 0x01, 0xC3, 0x84, 0x01, 0xC3, 0x46, 0x05, 0xC9, 0x00, 0x00,
  0xC3, 0x87, 0x04, 0x3A, 0x01, 0x80, 0xFE, 0xAA, 0xC2, 0x87, 0x04, 0xC3,
  0x02, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0C, 0xCD, 0x13, 0x02, 0x40, 0xC1, 0x41,
  0xD1, 0xE1, 0xCD, 0x97, 0x06, 0xC5, 0xE5, 0x3A, 0xB1, 0xFF, 0x4F, 0x06,
  0x00, 0x04, 0x0D, 0x28, 0x05, 0xCD, 0x3B, 0x02, 0x30, 0xF7, 0xD5, 0x21,
  0xFD, 0xE2, 0xCD, 0xA2, 0x06, 0xD1, 0xE1, 0xF1, 0xF5, 0xD5, 0x5F, 0x16,
  0x00, 0xCD, 0xA7, 0x06, 0x7B, 0xDF, 0x25, 0x78, 0xCD, 0xA7, 0x06, 0xCD,
  0xA2, 0x06, 0xE7, 0x40, 0xAF, 0x92, 0xCD, 0xA7, 0x06, 0x16, 0x00, 0x7E,
  0xCD, 0xA7, 0x06, 0x23, 0x10, 0xF9, 0xAF, 0x92, 0xCD, 0xA7, 0x06, 0xD1,
  0x2B, 0xCD, 0x3B, 0x02, 0x30, 0xB8, 0xC1, 0xC9, 0xCD, 0x13, 0x02, 0x40,
  0xC1, 0x41, 0xE1, 0xE5, 0xCD, 0x97, 0x06, 0x21, 0xFD, 0xE2, 0xCD, 0xA2,
  0x06, 0x78, 0x16, 0x00, 0xCD, 0xA7, 0x06, 0xAF, 0xCD, 0xA7, 0x06, 0xE1,
  0xCD, 0xA2, 0x06, 0xAF, 0x92, 0x18, 0x10, 0xC5, 0x06, 0x20, 0xAF, 0xCD,
  0xAB, 0x06, 0x10, 0xFA, 0xC1, 0xC9, 0x7D, 0xCD, 0xA7, 0x06, 0x7C, 0x4F,
  0x82, 0x57, 0x79, 0xD5, 0xC5, 0x4F, 0x1E, 0x09, 0xCD, 0xE7, 0x06, 0xCD,
  0xDC, 0x06, 0x1D, 0x28, 0x18, 0x79, 0x1F, 0x4F, 0x38, 0xF2, 0xCD, 0xDC,
  0x06, 0x79, 0x1F, 0x38, 0x05, 0xCD, 0xE7, 0x06, 0x18, 0xEC, 0x4F, 0xCD,
  0xFE, 0x06, 0x1D, 0x18, 0xE2, 0x16, 0x04, 0xCD, 0xDC, 0x06, 0x15, 0x20,
  0xFA, 0xC1, 0xD1, 0xC9, 0x06, 0x14, 0xCD, 0x09, 0x07, 0xCD, 0x02, 0x07,
  0x10, 0xFB, 0xC9, 0x06, 0x10, 0x3E, 0x10, 0x32, 0xF4, 0xFF, 0xD3, 0xF0,
  0x3E, 0x09, 0xD3, 0xF3, 0xCD, 0xE1, 0x06, 0xCD, 0x09, 0x07, 0x06, 0x04,
  0x18, 0xE3, 0x06, 0x24, 0x18, 0xE7, 0x3A, 0xB2, 0xFF, 0x3D, 0x20, 0xFD,
  0xC9, 0xAF, 0x32, 0xF4, 0xFF, 0xD3, 0xF0, 0x3E, 0x08, 0xD3, 0xF3, 0xC9,
  0x0D, 0xCD, 0x13, 0x02, 0x20, 0xC1, 0x41, 0xC5, 0x21, 0xFD, 0xE2, 0xCD,
  0x79, 0x07, 0xBD, 0x20, 0xFA, 0xCD, 0x79, 0x07, 0xBC, 0x20, 0xF7, 0x16,
  0x00, 0xCD, 0x79, 0x07, 0x5F, 0xDF, 0x25, 0xCD, 0x79, 0x07, 0x47, 0xCD,
  0x79, 0x07, 0x6F, 0xCD, 0x79, 0x07, 0x67, 0xE7, 0x40, 0xCD, 0x79, 0x07,
  0x20, 0x22, 0xF1, 0xF5, 0xBB, 0x20, 0xD1, 0x78, 0xB7, 0x28, 0x19, 0x3E,
  0x48, 0x32, 0xFB, 0xFF, 0xCD, 0x79, 0x07, 0x77, 0x23, 0x10, 0xF9, 0xCD,
  0x79, 0x07, 0x3E, 0x00, 0x32, 0xFB, 0xFF, 0x37, 0x20, 0x02, 0x18, 0xB4,
  0xC1, 0xC2, 0xB8, 0xFF, 0x3A, 0xB3, 0xFF, 0xB7, 0x20, 0x03, 0xD7, 0x80,
  0xE9, 0x22, 0xA9, 0xFF, 0xC9, 0xE5, 0xD5, 0xC5, 0xCD, 0x81, 0x07, 0x18,
  0xFB, 0x0E, 0x35, 0x0D, 0x28, 0x0A, 0xCD, 0x02, 0x07, 0xDB, 0xF0, 0xE6,
  0x80, 0x28, 0xF4, 0xC9, 0x2E, 0x80, 0x1E, 0x00, 0xCD, 0xD6, 0x07, 0x1C,
  0xCD, 0xD6, 0x07, 0xFE, 0x1D, 0xD0, 0xFE, 0x09, 0xD8, 0x1D, 0xCD, 0xD6,
  0x07, 0xFE, 0x1D, 0x30, 0x1B, 0xFE, 0x09, 0xD8, 0x7B, 0x2F, 0x5F, 0xCD,
  0xD6, 0x07, 0xFE, 0x1D, 0xD0, 0xFE, 0x09, 0xD8, 0x7B, 0x1F, 0x7D, 0x1F,
  0x6F, 0x38, 0x0D, 0x7B, 0x2F, 0x5F, 0x18, 0xDE, 0xFE, 0x31, 0xD0, 0xFE,
  0x1D, 0xD8, 0x18, 0xEC, 0xE1, 0xC1, 0xD1, 0xE1, 0x4F, 0x82, 0x57, 0xB7,
  0x79, 0xC9, 0x06, 0x00, 0xCD, 0x02, 0x07, 0x0C, 0x7B, 0xB7, 0xDB, 0xF0,
  0x28, 0x01, 0x2F, 0xE6, 0x80, 0x28, 0xF1, 0x16, 0x03, 0x04, 0x15, 0x79,
  0x48, 0xC8, 0x4F, 0xCD, 0x02, 0x07, 0x7B, 0xB7, 0xDB, 0xF0, 0x28, 0x01,
  0x2F, 0xE6, 0x80, 0x20, 0xEC, 0x0C, 0x18, 0xD6, 0xC3, 0x09, 0x08, 0xC3,
  0xED, 0x3E, 0xC3, 0xFF, 0xFF, 0x3E, 0xC9, 0x32, 0xFF, 0xFF, 0xCD, 0x07,
  0x00, 0x17, 0xFE, 0x10, 0xF2, 0x87, 0x04, 0x21, 0x24, 0x08, 0x5F, 0x16,
  0x00, 0x19, 0x19, 0x5E, 0x23, 0x56, 0xEB, 0xE9, 0xF3, 0x0F, 0x44, 0x08,
  0x73, 0x0B, 0x85, 0x0F, 0x7B, 0x1A, 0x42, 0x1D, 0xBC, 0x1D, 0xEC, 0x1D,
  0x00, 0x10, 0x03, 0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xF5, 0x1D, 0x39, 0x1E, 0x31, 0x8D, 0xFF, 0x3E, 0x82, 0xD3, 0xE3, 0xCD,
  0xB1, 0x09, 0x3E, 0x82, 0xD3, 0xE3, 0x3E, 0x04, 0xD3, 0xE2, 0xCD, 0xEB,
  0x09, 0xCD, 0x07, 0x00, 0x17, 0xD6, 0x0A, 0xDA, 0x0D, 0x0A, 0xFE, 0x05,
  0xF2, 0x0D, 0x0A, 0x5F, 0x16, 0x00, 0xD7, 0x70, 0x01, 0x4E, 0x08, 0xC5,
  0x0E, 0x02, 0x21, 0x7C, 0x08, 0x19, 0x19, 0x7E, 0x23, 0x66, 0x6F, 0xE9,
  0x86, 0x08, 0xE4, 0x08, 0x12, 0x09, 0xA8, 0x09, 0x67, 0x09, 0xCD, 0x07,
  0x00, 0x40, 0xDA, 0xC5, 0x08, 0xCD, 0xF8, 0x01, 0xDA, 0x0D, 0x0A, 0xE5,
  0xCD, 0xF5, 0x01, 0xD2, 0x0D, 0x0A, 0xEB, 0xE1, 0x4B, 0x42, 0xCD, 0x09,
  0x09, 0xCD, 0x57, 0x0B, 0x4D, 0x44, 0xCD, 0x32, 0x0B, 0x0E, 0xFF, 0xDB,
  0xE1, 0xB9, 0xC4, 0xB8, 0x08, 0xCD, 0x3B, 0x02, 0xD2, 0xA1, 0x08, 0xC9,
  0xE7, 0x43, 0xDB, 0xE1, 0xDF, 0x20, 0xCD, 0xC6, 0xFF, 0xD8, 0xC3, 0x0D,
  0x0A, 0x3A, 0xE6, 0xFF, 0x5F, 0x16, 0x00, 0x21, 0xDA, 0x08, 0x19, 0x19,
  0x5E, 0x23, 0x56, 0x1B, 0x21, 0x00, 0x00, 0xC3, 0xA1, 0x08, 0x00, 0x08,
  0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x0C, 0xCD, 0x13, 0x02,
  0x40, 0xC1, 0xD1, 0xE1, 0xCD, 0x09, 0x09, 0xCD, 0x57, 0x0B, 0xCD, 0xFF,
  0x08, 0xDB, 0xE1, 0x02, 0x03, 0xCD, 0x3B, 0x02, 0x30, 0xF4, 0xC9, 0xC5,
  0xE3, 0xC1, 0xCD, 0x32, 0x0B, 0xC5, 0xE3, 0xC1, 0xC9, 0x79, 0xFE, 0xFF,
  0xC0, 0xB8, 0xC0, 0xC3, 0x0D, 0x0A, 0x0C, 0xCD, 0x13, 0x02, 0x40, 0xC1,
  0xD1, 0xE1, 0xCD, 0x09, 0x09, 0xCD, 0x57, 0x0B, 0xCD, 0xFF, 0x08, 0xE5,
  0x0A, 0x6F, 0xDB, 0xE1, 0xBD, 0xE1, 0xC4, 0x34, 0x09, 0x03, 0xCD, 0x3B,
  0x02, 0x30, 0xED, 0xC9, 0xC5, 0xE3, 0xC1, 0xCD, 0x3E, 0x09, 0xC5, 0xE3,
  0xC1, 0xC9, 0xF5, 0xC5, 0xDF, 0x20, 0xD7, 0x12, 0xC1, 0xE5, 0x69, 0x60,
  0xC5, 0xE7, 0x43, 0xC1, 0xE1, 0xCD, 0xC6, 0xFF, 0x30, 0x10, 0xC5, 0xE7,
  0x43, 0x7E, 0xDF, 0x20, 0xC1, 0xCD, 0xC6, 0xFF, 0x30, 0x04, 0xF1, 0xC3,
  0x3E, 0x09, 0xC2, 0x0D, 0x0A, 0xF1, 0xC9, 0x0C, 0xCD, 0x13, 0x02, 0x40,
  0xC1, 0xD1, 0xE1, 0xCD, 0x09, 0x09, 0xE5, 0x21, 0xA2, 0x09, 0xC5, 0xCD,
  0xD4, 0x01, 0x50, 0xC1, 0x21, 0x9B, 0x09, 0xE3, 0x3A, 0xE6, 0xFF, 0x3C,
  0x3D, 0xCA, 0x36, 0x0A, 0x3D, 0xCA, 0x6E, 0x0A, 0x3D, 0xCA, 0xB0, 0x0A,
  0x3D, 0xCA, 0xF2, 0x0A, 0x3D, 0xCA, 0xF2, 0x0A, 0xC3, 0x0D, 0x0A, 0xC8,
  0xCD, 0x3E, 0x09, 0xC3, 0x0D, 0x0A, 0x40, 0x73, 0x50, 0x5C, 0x40, 0xFF,
  0xCD, 0xC6, 0xFF, 0xDA, 0x44, 0x08, 0xC3, 0x0D, 0x0A, 0xD7, 0x80, 0x21,
  0xE8, 0x09, 0xCD, 0xD4, 0x01, 0x26, 0x01, 0x00, 0x00, 0xCD, 0xF4, 0x01,
  0x40, 0xE5, 0x21, 0xDE, 0x09, 0x09, 0x09, 0x5E, 0x23, 0x56, 0xE1, 0xE5,
  0xB7, 0xED, 0x52, 0xE1, 0x79, 0x32, 0xE6, 0xFF, 0xC8, 0x0C, 0xFE, 0x05,
  0xD2, 0xB1, 0x09, 0xC3, 0xC1, 0x09, 0x16, 0x27, 0x32, 0x27, 0x2A, 0x73,
  0x64, 0x27, 0x28, 0x71, 0x73, 0x77, 0xFF, 0xD7, 0x80, 0x3A, 0xE6, 0xFF,
  0x5F, 0x16, 0x00, 0xFE, 0x02, 0x28, 0x04, 0xFE, 0x04, 0x20, 0x06, 0x0E,
  0x02, 0xCD, 0xE0, 0x01, 0x14, 0x21, 0xDE, 0x09, 0x19, 0x19, 0x7E, 0x23,
  0x66, 0x6F, 0xE7, 0x40, 0xC9, 0x31, 0x8D, 0xFF, 0xD7, 0x80, 0x21, 0x23,
  0x0A, 0xCD, 0xD4, 0x01, 0x50, 0x06, 0x0A, 0xCD, 0x29, 0x0A, 0x10, 0xFB,
  0xC3, 0x4E, 0x08, 0x79, 0x50, 0x50, 0x5C, 0x50, 0xFF, 0x3E, 0x19, 0x32,
  0xEA, 0xFF, 0x3A, 0xEA, 0xFF, 0xB7, 0xC2, 0x2E, 0x0A, 0xC9, 0x3E, 0x80,
  0xD3, 0xE3, 0x3E, 0x38, 0xD3, 0xE2, 0xCD, 0x32, 0x0B, 0xE3, 0xE3, 0x3E,
  0x39, 0xD3, 0xE2, 0xCD, 0x29, 0x0A, 0x3E, 0x38, 0xD3, 0xE2, 0xE3, 0xE3,
  0x3E, 0x82, 0xD3, 0xE3, 0x3E, 0x3A, 0xD3, 0xE2, 0xCD, 0x32, 0x0B, 0xDB,
  0xE1, 0xBE, 0xF5, 0x3E, 0x04, 0xD3, 0xE2, 0xF1, 0xC0, 0x03, 0xCD, 0x3B,
  0x02, 0xD2, 0x36, 0x0A, 0xAF, 0xC9, 0x3E, 0x80, 0xD3, 0xE3, 0x3E, 0x04,
  0xD3, 0xE2, 0xCD, 0x32, 0x0B, 0x3E, 0x38, 0xD3, 0xE2, 0xE3, 0xE3, 0x3E,
  0x3A, 0xD3, 0xE2, 0xCD, 0x29, 0x0A, 0x3E, 0x38, 0xD3, 0xE2, 0xE3, 0xE3,
  0x3E, 0x04, 0xD3, 0xE2, 0xE3, 0xE3, 0x3E, 0x82, 0xD3, 0xE3, 0x3E, 0x06,
  0xD3, 0xE2, 0xCD, 0x32, 0x0B, 0xDB, 0xE1, 0xBE, 0xF5, 0x3E, 0x04, 0xD3,
  0xE2, 0xF1, 0xC0, 0x03, 0xCD, 0x3B, 0x02, 0xD2, 0x6E, 0x0A, 0xAF, 0xC9,
  0x3E, 0x80, 0xD3, 0xE3, 0x3E, 0x04, 0xD3, 0xE2, 0xCD, 0x32, 0x0B, 0x3E,
  0x28, 0xD3, 0xE2, 0xE3, 0xE3, 0x3E, 0x2A, 0xD3, 0xE2, 0xCD, 0x29, 0x0A,
  0x3E, 0x28, 0xD3, 0xE2, 0xE3, 0xE3, 0x3E, 0x04, 0xD3, 0xE2, 0xE3, 0xE3,
  0x3E, 0x82, 0xD3, 0xE3, 0x3E, 0x06, 0xD3, 0xE2, 0xCD, 0x32, 0x0B, 0xDB,
  0xE1, 0xBE, 0xF5, 0x3E, 0x04, 0xD3, 0xE2, 0xF1, 0xC0, 0x03, 0xCD, 0x3B,
  0x02, 0xD2, 0xB0, 0x0A, 0xAF, 0xC9, 0x3E, 0x80, 0xD3, 0xE3, 0x3E, 0x05,
  0xD3, 0xE2, 0xCD, 0x32, 0x0B, 0x3E, 0x29, 0xD3, 0xE2, 0xE3, 0xE3, 0x3E,
  0x28, 0xD3, 0xE2, 0xCD, 0x29, 0x0A, 0x3E, 0x29, 0xD3, 0xE2, 0xE3, 0xE3,
  0x3E, 0x05, 0xD3, 0xE2, 0x3E, 0x82, 0xD3, 0xE3, 0x3E, 0x2B, 0xD3, 0xE2,
  0xCD, 0x32, 0x0B, 0xDB, 0xE1, 0xBE, 0xF5, 0x3E, 0x05, 0xD3, 0xE2, 0xF1,
  0xC0, 0x03, 0xCD, 0x3B, 0x02, 0xD2, 0xF2, 0x0A, 0xAF, 0xC9, 0xC5, 0x3E,
  0x0D, 0xD3, 0xE3, 0x3E, 0x0C, 0xD3, 0xE3, 0x79, 0xD3, 0xE0, 0x78, 0xE6,
  0x3F, 0x47, 0x04, 0x05, 0xCA, 0x52, 0x0B, 0x3E, 0x0F, 0xD3, 0xE3, 0x3E,
  0x0E, 0xD3, 0xE3, 0xC3, 0x43, 0x0B, 0x7E, 0xD3, 0xE1, 0xC1, 0xC9, 0x3A,
  0xE6, 0xFF, 0x3C, 0x3D, 0x28, 0x10, 0x3D, 0x28, 0x08, 0x3D, 0x28, 0x05,
  0x3E, 0x23, 0xD3, 0xE2, 0xC9, 0x3E, 0x06, 0xD3, 0xE2, 0xC9, 0x3E, 0x22,
  0xD3, 0xE2, 0xC9, 0xCD, 0xAC, 0x0C, 0x21, 0x10, 0xFE, 0xCD, 0xA0, 0x0C,
  0xCD, 0xE2, 0x0C, 0xF5, 0x3A, 0x11, 0xFE, 0xB7, 0x20, 0x04, 0x3C, 0x32,
  0x11, 0xFE, 0xF1, 0x38, 0xE6, 0xCD, 0xC6, 0xFF, 0xCD, 0xB7, 0x0C, 0x38,
  0xDE, 0x28, 0xF6, 0xFE, 0x11, 0x28, 0x04, 0xFE, 0x0A, 0x30, 0xEE, 0x21,
  0x1A, 0xFE, 0xCD, 0xA0, 0x0C, 0xCD, 0xE5, 0x0C, 0xF5, 0x3A, 0x1B, 0xFE,
  0xB7, 0x20, 0x04, 0x3C, 0x32, 0x1B, 0xFE, 0xF1, 0x30, 0x08, 0x21, 0x10,
  0xFE, 0xCD, 0x41, 0x0D, 0x18, 0xCF, 0xCD, 0x8A, 0x0D, 0x21, 0x10, 0xFE,
  0xCD, 0xF5, 0x0B, 0x38, 0x24, 0x21, 0x10, 0xFE, 0x7E, 0xFE, 0x09, 0x38,
  0x05, 0xCD, 0x7B, 0x0C, 0x18, 0xF3, 0x21, 0x10, 0xFE, 0xCD, 0x41, 0x0D,
  0x3A, 0xF7, 0xFF, 0xF6, 0x80, 0x32, 0xF7, 0xFF, 0xCD, 0xC6, 0xFF, 0xFE,
  0x10, 0x20, 0xF9, 0x18, 0x86, 0x21, 0x10, 0xFE, 0xCD, 0x41, 0x0D, 0x18,
  0x98, 0x7E, 0xFE, 0x09, 0xD8, 0x23, 0x7E, 0xFE, 0x02, 0x3F, 0xD0, 0x2B,
  0xE5, 0xCD, 0x7B, 0x0C, 0xE1, 0x18, 0xEE, 0x23, 0x7E, 0xFE, 0x02, 0xD8,
  0x23, 0x7E, 0xE6, 0x0F, 0xC0, 0x2B, 0x2B, 0xE5, 0xCD, 0x7B, 0x0C, 0xE1,
  0x18, 0xED, 0x3A, 0x11, 0xFE, 0xB7, 0x20, 0x01, 0x3C, 0x47, 0x3A, 0x1B,
  0xFE, 0xB7, 0x20, 0x01, 0x3C, 0xB8, 0xC8, 0x38, 0x09, 0x90, 0x47, 0x21,
  0x10, 0xFE, 0xCD, 0x41, 0x0C, 0xC9, 0x4F, 0x78, 0x91, 0x47, 0x21, 0x1A,
  0xFE, 0xCD, 0x41, 0x0C, 0xC9, 0x23, 0x7E, 0xB7, 0x2B, 0x20, 0x03, 0x23,
  0x34, 0x2B, 0x0E, 0x00, 0xC5, 0xE5, 0xCD, 0x56, 0x0C, 0xE1, 0xC1, 0x10,
  0xEC, 0xC9, 0x79, 0x07, 0x07, 0x07, 0x07, 0x4F, 0x34, 0x23, 0x7E, 0xB7,
  0x28, 0x01, 0x34, 0x16, 0x08, 0x23, 0x06, 0x04, 0x79, 0x17, 0x4F, 0x7E,
  0x17, 0x77, 0x10, 0xF8, 0x79, 0x17, 0x17, 0x17, 0x17, 0x17, 0x4F, 0x15,
  0x20, 0xEB, 0xC9, 0x35, 0x23, 0x7E, 0xB7, 0x28, 0x01, 0x35, 0x01, 0x08,
  0x00, 0x09, 0x16, 0x08, 0x0E, 0x00, 0x06, 0x04, 0x79, 0x1F, 0x4F, 0x7E,
  0x1F, 0x77, 0x10, 0xF8, 0x79, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x4F, 0x2B,
  0x15, 0x20, 0xEB, 0xC9, 0xF5, 0xE5, 0x06, 0x0A, 0xAF, 0x77, 0x23, 0x10,
  0xFC, 0xE1, 0xF1, 0xC9, 0xF5, 0xD7, 0x80, 0x0E, 0x00, 0xCD, 0xE0, 0x01,
  0x80, 0xF1, 0xC9, 0xFE, 0x0F, 0x28, 0x1B, 0xFE, 0x0E, 0x28, 0x17, 0xFE,
  0x0C, 0x28, 0x13, 0xFE, 0x0D, 0x28, 0x0F, 0xFE, 0x10, 0x37, 0x28, 0x15,
  0xFE, 0x12, 0x28, 0x06, 0xB7, 0xC0, 0x0E, 0x00, 0x0C, 0xC9, 0xF5, 0x3A,
  0x39, 0xFE, 0x32, 0x38, 0xFE, 0xF1, 0x32, 0x39, 0xFE, 0xC9, 0xCD, 0xC6,
  0xFF, 0xCD, 0xB7, 0x0C, 0xD8, 0x20, 0x05, 0x7E, 0xB7, 0xC0, 0x18, 0xF2,
  0xFE, 0x11, 0x20, 0x20, 0x7E, 0xB7, 0x20, 0x09, 0x34, 0xD7, 0x80, 0x0E,
  0x00, 0xCD, 0xE0, 0x01, 0x10, 0x23, 0x7E, 0xB7, 0x2B, 0x20, 0xDB, 0x23,
  0x34, 0x2B, 0x3A, 0xF7, 0xFF, 0xF6, 0x80, 0x32, 0xF7, 0xFF, 0x18, 0xCE,
  0xB7, 0x4F, 0x20, 0x0E, 0x7E, 0xB7, 0x20, 0x0A, 0xD7, 0x80, 0x0E, 0x00,
  0xCD, 0xE0, 0x01, 0x10, 0x18, 0xBC, 0x7E, 0xFE, 0x08, 0x30, 0xB7, 0x79,
  0xFE, 0x0A, 0x30, 0xB2, 0x7E, 0xB7, 0x20, 0x02, 0xD7, 0x80, 0xCD, 0xE0,
  0x01, 0x80, 0xE5, 0xCD, 0x56, 0x0C, 0xE1, 0x18, 0xA1, 0xE5, 0xCD, 0x07,
  0x0C, 0xE1, 0xD7, 0x80, 0x7E, 0xB7, 0x1F, 0x4F, 0x06, 0x00, 0xF5, 0x09,
  0x23, 0x41, 0xF1, 0x30, 0x0D, 0x23, 0x7E, 0xE6, 0x0F, 0x4F, 0xCD, 0xE0,
  0x01, 0x80, 0x2B, 0x04, 0x05, 0xC8, 0x7E, 0x0F, 0x0F, 0x0F, 0x0F, 0xE6,
  0x0F, 0x4F, 0xCD, 0xE0, 0x01, 0x80, 0x7E, 0xE6, 0x0F, 0x4F, 0xCD, 0xE0,
  0x01, 0x80, 0x2B, 0x10, 0xE9, 0x7E, 0xFE, 0x02, 0xD8, 0x21, 0xF7, 0xFF,
  0x3D, 0x4F, 0x06, 0x00, 0x09, 0x7E, 0xF6, 0x80, 0x77, 0xC9, 0xCD, 0xA3,
  0x0D, 0x3A, 0x38, 0xFE, 0xFE, 0x0F, 0x28, 0x1C, 0xFE, 0x0E, 0x28, 0x33,
  0xFE, 0x0C, 0xCA, 0x09, 0x0E, 0xFE, 0x0D, 0xCA, 0x72, 0x0E, 0xC9, 0x21,
  0x10, 0xFE, 0xCD, 0x07, 0x0C, 0x21, 0x1A, 0xFE, 0xCD, 0x07, 0x0C, 0xC9,
  0xCD, 0x1A, 0x0C, 0x21, 0x12, 0xFE, 0x11, 0x1C, 0xFE, 0xB7, 0x06, 0x08,
  0x1A, 0x8E, 0x27, 0x77, 0x23, 0x13, 0x10, 0xF8, 0xCD, 0xE8, 0x0D, 0xCD,
  0xA3, 0x0D, 0xC9, 0xCD, 0x1A, 0x0C, 0x21, 0x12, 0xFE, 0x11, 0x1C, 0xFE,
  0xB7, 0x06, 0x08, 0x1A, 0x4F, 0x7E, 0x99, 0x27, 0x77, 0x23, 0x13, 0x10,
  0xF6, 0xCD, 0xE8, 0x0D, 0xCD, 0xA3, 0x0D, 0xC9, 0x06, 0x10, 0x21, 0x19,
  0xFE, 0x7E, 0xE6, 0xF0, 0x20, 0x0A, 0x05, 0x7E, 0xE6, 0x0F, 0x20, 0x04,
  0x2B, 0x10, 0xF2, 0x04, 0x21, 0x10, 0xFE, 0x70, 0x23, 0x78, 0xBE, 0xD0,
  0x7E, 0x2B, 0x77, 0xC9, 0xC9, 0xCD, 0x16, 0x0E, 0xCD, 0x33, 0x0E, 0xCD,
  0x42, 0x0E, 0xCD, 0xE8, 0x0D, 0xC9, 0x21, 0x10, 0xFE, 0x11, 0x24, 0xFE,
  0x01, 0x0A, 0x00, 0xED, 0xB0, 0x21, 0x1A, 0xFE, 0x11, 0x2E, 0xFE, 0x01,
  0x0A, 0x00, 0xED, 0xB0, 0x21, 0x10, 0xFE, 0xCD, 0xA0, 0x0C, 0xC9, 0x3A,
  0x25, 0xFE, 0x3D, 0x47, 0x3A, 0x2F, 0xFE, 0x3D, 0x80, 0x3C, 0x32, 0x11,
  0xFE, 0xC9, 0x21, 0x2E, 0xFE, 0x7E, 0xB7, 0xC8, 0xCD, 0x7B, 0x0C, 0x47,
  0xB7, 0x28, 0x05, 0xCD, 0x5E, 0x0E, 0x10, 0xFB, 0x21, 0x24, 0xFE, 0x0E,
  0x00, 0xCD, 0x56, 0x0C, 0x18, 0xE4, 0xC5, 0x21, 0x12, 0xFE, 0x11, 0x26,
  0xFE, 0xB7, 0x06, 0x08, 0x1A, 0x8E, 0x27, 0x77, 0x23, 0x13, 0x10, 0xF8,
  0xC1, 0xC9, 0xCD, 0x21, 0x0F, 0xCD, 0x16, 0x0E, 0xCD, 0x81, 0x0E, 0xCD,
  0xA3, 0x0D, 0xC3, 0xE8, 0x0D, 0x3A, 0x2E, 0xFE, 0x4F, 0x3A, 0x24, 0xFE,
  0xB9, 0x06, 0x09, 0x38, 0x07, 0x91, 0x47, 0xB7, 0x20, 0x16, 0x06, 0x09,
  0xCD, 0xE1, 0x0E, 0xCD, 0xD6, 0x0E, 0x21, 0x10, 0xFE, 0x23, 0x34, 0xCD,
  0xE1, 0x0E, 0xCD, 0xD6, 0x0E, 0x10, 0xF8, 0xC9, 0xCD, 0xBE, 0x0E, 0x0E,
  0x00, 0x0C, 0xCD, 0xE1, 0x0E, 0xCD, 0xCD, 0x0E, 0x10, 0xF7, 0x3E, 0x09,
  0x91, 0xD8, 0x47, 0xC3, 0x94, 0x0E, 0xC5, 0x21, 0x2E, 0xFE, 0x0E, 0x00,
  0xC5, 0xCD, 0x56, 0x0C, 0xC1, 0x10, 0xF4, 0xC1, 0xC9, 0xC5, 0x21, 0x2E,
  0xFE, 0xCD, 0x7B, 0x0C, 0xC1, 0xC9, 0xC5, 0x21, 0x24, 0xFE, 0x0E, 0x00,
  0xCD, 0x56, 0x0C, 0xC1, 0xC9, 0xC5, 0x06, 0x00, 0x04, 0xCD, 0x0B, 0x0F,
  0x30, 0xFA, 0x05, 0xCD, 0xF7, 0x0E, 0x21, 0x10, 0xFE, 0x48, 0xCD, 0x56,
  0x0C, 0xC1, 0xC9, 0xC5, 0x21, 0x26, 0xFE, 0x11, 0x30, 0xFE, 0x06, 0x08,
  0xB7, 0x1A, 0x8E, 0x27, 0x77, 0x23, 0x13, 0x10, 0xF8, 0xC1, 0xC9, 0xC5,
  0x21, 0x26, 0xFE, 0x11, 0x30, 0xFE, 0xB7, 0x06, 0x08, 0x1A, 0x4F, 0x7E,
  0x99, 0x27, 0x77, 0x23, 0x13, 0x10, 0xF6, 0xC1, 0xC9, 0xCD, 0xA3, 0x0D,
  0x3A, 0x11, 0xFE, 0x3D, 0x47, 0x32, 0x11, 0xFE, 0x3A, 0x1B, 0xFE, 0x3D,
  0x32, 0x1B, 0xFE, 0xB8, 0x38, 0x01, 0x47, 0xC5, 0x21, 0x10, 0xFE, 0xCD,
  0x4C, 0x0F, 0xC1, 0x21, 0x1A, 0xFE, 0xCD, 0x4C, 0x0F, 0xCD, 0xE8, 0x0D,
  0xCD, 0x64, 0x0F, 0xC9, 0x04, 0x05, 0xC8, 0x23, 0x35, 0x34, 0x28, 0x04,
  0x35, 0x2B, 0x18, 0xF5, 0x2B, 0x0E, 0x00, 0xE5, 0xC5, 0xCD, 0x56, 0x0C,
  0xC1, 0xE1, 0x18, 0xE9, 0x06, 0x10, 0x21, 0x23, 0xFE, 0x7E, 0xE6, 0xF0,
  0x20, 0x0C, 0x05, 0x7E, 0xE6, 0x0F, 0x20, 0x06, 0x2B, 0x10, 0xF2, 0xC3,
  0x7F, 0x0F, 0x21, 0x1A, 0xFE, 0x70, 0xC9, 0xF1, 0xF1, 0xF1, 0xC3, 0xD6,
  0x0B, 0xCD, 0xF4, 0x01, 0x40, 0xD0, 0x06, 0x00, 0xE7, 0x43, 0x7E, 0xDF,
  0x20, 0xCF, 0x38, 0x1F, 0x20, 0x08, 0x7D, 0xE6, 0x0F, 0x28, 0xEF, 0x2B,
  0x18, 0xF8, 0xFE, 0x10, 0xD0, 0x4F, 0xD7, 0x20, 0xCD, 0xE1, 0x01, 0x79,
  0xEB, 0xCD, 0xF8, 0x01, 0xEB, 0x30, 0xE7, 0x73, 0x7B, 0x18, 0x01, 0x7E,
  0x80, 0x47, 0x23, 0x7D, 0xE6, 0x0F, 0x20, 0xD0, 0xE5, 0xD7, 0x70, 0x21,
  0xE6, 0x0F, 0xCD, 0xD4, 0x01, 0x43, 0xCD, 0xF4, 0x01, 0x20, 0x78, 0x95,
  0xE1, 0x28, 0xBB, 0xE5, 0x21, 0xEB, 0x0F, 0xCD, 0xD4, 0x01, 0x70, 0x21,
  0x60, 0xEA, 0x2B, 0x7D, 0xB4, 0x20, 0xFB, 0xD7, 0x70, 0xE1, 0x2B, 0xC3,
  0x96, 0x0F, 0x6D, 0x1C, 0x54, 0x77, 0xFF, 0x00, 0x00, 0x79, 0x50, 0x50,
  0x5C, 0x50, 0xFF, 0x3A, 0x01, 0x40, 0xFE, 0x55, 0xCA, 0x20, 0x40, 0xC3,
  0x87, 0x04, 0xFF, 0xFF, 0x31, 0x8D, 0xFF, 0xF3, 0xCD, 0x74, 0x19, 0x28,
  0x19, 0x3E, 0x80, 0xD3, 0xE3, 0x06, 0x31, 0x21, 0x3A, 0xFE, 0xAF, 0x77,
  0x23, 0x10, 0xFC, 0xCD, 0x46, 0x13, 0xCD, 0xA8, 0x19, 0x3E, 0x32, 0x32,
  0x4B, 0xFE, 0x21, 0x86, 0x10, 0x22, 0xC7, 0xFF, 0x21, 0x91, 0x10, 0x22,
  0xC4, 0xFF, 0x21, 0x9C, 0x10, 0x22, 0xCD, 0xFF, 0x3E, 0xC3, 0x32, 0xCC,
  0xFF, 0xCD, 0xA0, 0x14, 0x31, 0x8D, 0xFF, 0xD7, 0x80, 0x21, 0x6C, 0x13,
  0xCD, 0xD4, 0x01, 0x40, 0xCD, 0x07, 0x00, 0x17, 0x5F, 0xFE, 0x10, 0xD2,
  0x59, 0x13, 0xD7, 0x70, 0x21, 0x3C, 0x10, 0xE5, 0x0E, 0x02, 0x21, 0x66,
  0x10, 0x16, 0x00, 0x19, 0x19, 0x5E, 0x23, 0x56, 0xEB, 0xE9, 0xEE, 0x10,
  0xDC, 0x02, 0x51, 0x12, 0x5E, 0x12, 0x76, 0x12, 0x71, 0x13, 0xA8, 0x12,
  0xE9, 0x12, 0x13, 0x18, 0x8C, 0x13, 0x46, 0x14, 0x6C, 0x14, 0x88, 0x14,
  0xB9, 0x14, 0xF2, 0x14, 0xFF, 0xFF, 0xCD, 0x84, 0x01, 0xF5, 0xFE, 0x10,
  0xCA, 0x3C, 0x10, 0xF1, 0xC9, 0xED, 0x57, 0xE2, 0x30, 0x01, 0xF3, 0xCD,
  0x30, 0x01, 0xFB, 0xC9, 0x21, 0x3A, 0xFE, 0x7E, 0xB7, 0x28, 0x01, 0x35,
  0x23, 0x35, 0x23, 0x35, 0xC0, 0x36, 0x05, 0x23, 0xEB, 0x21, 0x41, 0xFE,
  0x7E, 0xB7, 0x3D, 0x27, 0x77, 0x23, 0x7E, 0xDE, 0x00, 0x27, 0x77, 0x23,
  0x7E, 0xDE, 0x00, 0x27, 0x77, 0xEB, 0x7E, 0xB7, 0x3C, 0x27, 0x77, 0xC0,
  0x23, 0x7E, 0xB7, 0x3C, 0x27, 0x77, 0xFE, 0x60, 0xD8, 0xAF, 0x77, 0x23,
  0x3A, 0x45, 0xFE, 0xB7, 0x3D, 0x27, 0x32, 0x45, 0xFE, 0x7E, 0xC6, 0x01,
  0x27, 0x77, 0xFE, 0x60, 0xD8, 0xAF, 0x77, 0x23, 0x7E, 0x3C, 0x27, 0x77,
  0xC9, 0xF1, 0x0E, 0x40, 0xCD, 0xAB, 0x01, 0x12, 0xCD, 0xAB, 0x01, 0x15,
  0xCD, 0xC3, 0xFF, 0x38, 0x1A, 0x21, 0xED, 0xFF, 0xCD, 0x21, 0x12, 0xCD,
  0xBA, 0x17, 0x20, 0x01, 0xFB, 0xCD, 0xCF, 0x11, 0xCD, 0x99, 0x15, 0xCD,
  0x01, 0x16, 0xCD, 0x14, 0x16, 0x18, 0xE1, 0xFE, 0x04, 0x30, 0x08, 0x21,
  0xF1, 0xFF, 0xCD, 0x21, 0x12, 0x18, 0xD5, 0xFE, 0x0A, 0x30, 0x13, 0x21,
  0x3F, 0x12, 0x3A, 0xF0, 0xFF, 0x2F, 0xE6, 0x07, 0x5F, 0x16, 0x00, 0x19,
  0x19, 0xCD, 0x17, 0x12, 0x18, 0xBE, 0xFE, 0x10, 0xC8, 0x30, 0xB9, 0xD6,
  0x0A, 0x5F, 0x16, 0x00, 0x21, 0xF8, 0x10, 0xE5, 0x21, 0x52, 0x11, 0x19,
  0x19, 0x7E, 0x23, 0x66, 0x6F, 0xE9, 0x5E, 0x11, 0x76, 0x11, 0x8A, 0x11,
  0xED, 0x10, 0x90, 0x11, 0xB7, 0x11, 0x21, 0x46, 0xFE, 0xCD, 0x25, 0x12,
  0x21, 0x4D, 0x12, 0xCD, 0x17, 0x12, 0x21, 0x4E, 0xFE, 0xCB, 0x5E, 0xC8,
  0x21, 0xF7, 0xFF, 0xCB, 0xFE, 0xC9, 0x21, 0x44, 0xFE, 0xCD, 0x25, 0x12,
  0x21, 0x4F, 0x12, 0xCD, 0x17, 0x12, 0x21, 0x4E, 0xFE, 0xCB, 0x56, 0xC8,
  0x18, 0xE6, 0x0E, 0x00, 0xF1, 0xC3, 0xF0, 0x10, 0x21, 0x58, 0xFE, 0xCD,
  0x21, 0x12, 0x3A, 0x4E, 0xFE, 0xCB, 0x47, 0xC8, 0xED, 0x5B, 0x59, 0xFE,
  0x2A, 0xEE, 0xFF, 0xB7, 0xED, 0x52, 0x20, 0xC8, 0x3A, 0x58, 0xFE, 0xB7,
  0xCA, 0x70, 0x12, 0xCD, 0xEC, 0x11, 0xED, 0x53, 0x59, 0xFE, 0xC9, 0x21,
  0x5B, 0xFE, 0xCD, 0x21, 0x12, 0xED, 0x57, 0xE2, 0xC7, 0x11, 0x21, 0xF8,
  0xFF, 0xCB, 0xFE, 0x3A, 0x4E, 0xFE, 0xCB, 0x4F, 0xC8, 0x18, 0xA1, 0x3A,
  0x4E, 0xFE, 0xCB, 0x47, 0xC8, 0xED, 0x5B, 0xEE, 0xFF, 0x2A, 0x59, 0xFE,
  0xB7, 0xED, 0x52, 0xC0, 0x3A, 0xE8, 0xFF, 0xB7, 0xC0, 0x21, 0x7F, 0x3F,
  0x22, 0xE8, 0xFF, 0xC9, 0xFE, 0x60, 0x38, 0x08, 0xD6, 0x60, 0xF5, 0x7A,
  0x3C, 0x27, 0x57, 0xF1, 0x83, 0x27, 0x30, 0x09, 0xF5, 0xB7, 0x7A, 0x3C,
  0x27, 0x57, 0xF1, 0xC6, 0x40, 0x5F, 0xFE, 0x60, 0x38, 0x07, 0xD6, 0x60,
  0x5F, 0x7A, 0x3C, 0x27, 0x57, 0x7A, 0xD6, 0x24, 0xD8, 0x57, 0xC9, 0x11,
  0xF8, 0xFF, 0x7E, 0x12, 0x23, 0x1B, 0x7E, 0x12, 0xC9, 0x7E, 0xDF, 0x20,
  0x23, 0x7E, 0xDF, 0x23, 0x23, 0x7E, 0xE6, 0xF0, 0x20, 0x0C, 0xAF, 0x32,
  0xFE, 0xFF, 0x4E, 0xCD, 0xE0, 0x01, 0x16, 0x2B, 0x2B, 0xC9, 0x7E, 0xDF,
  0x26, 0x18, 0xF8, 0x73, 0x54, 0x1C, 0x31, 0x6D, 0x50, 0x39, 0x1C, 0x73,
  0x31, 0x6D, 0x5C, 0x54, 0x79, 0x54, 0x31, 0x31, 0x37, 0xCD, 0xED, 0x02,
  0x21, 0xF0, 0xFF, 0x7E, 0x2F, 0x3C, 0xE6, 0x07, 0x77, 0xC9, 0xCD, 0x91,
  0x12, 0x30, 0x0D, 0x22, 0x59, 0xFE, 0x79, 0x32, 0x58, 0xFE, 0x21, 0x4E,
  0xFE, 0xCB, 0xC6, 0xC9, 0x21, 0x4E, 0xFE, 0xCB, 0x86, 0xC9, 0xCD, 0x91,
  0x12, 0x30, 0x10, 0xCD, 0xA0, 0x14, 0x79, 0x32, 0x5B, 0xFE, 0x22, 0x5C,
  0xFE, 0x21, 0x4E, 0xFE, 0xCB, 0xCE, 0xC9, 0x21, 0x4E, 0xFE, 0xCB, 0x8E,
  0xC9, 0x0E, 0x03, 0xCD, 0xB4, 0x19, 0x20, 0xC1, 0xD1, 0xE1, 0x65, 0x6B,
  0x79, 0xFE, 0x99, 0xD0, 0x7D, 0xFE, 0x60, 0xD0, 0x7C, 0xFE, 0x24, 0xC9,
  0xCD, 0xCE, 0x19, 0x10, 0xF5, 0x7D, 0xE6, 0x0F, 0xFE, 0x02, 0xD2, 0x59,
  0x13, 0xB7, 0x20, 0x1C, 0xF1, 0xDA, 0x59, 0x13, 0x0E, 0x02, 0xCD, 0x13,
  0x02, 0x40, 0xC1, 0xE1, 0x79, 0xE6, 0x0F, 0xFE, 0x02, 0xD2, 0x59, 0x13,
  0x22, 0x6B, 0xFE, 0x0D, 0xC0, 0xC3, 0xAE, 0x19, 0xF1, 0xCD, 0x74, 0x19,
  0xC2, 0x59, 0x13, 0x2B, 0xE7, 0x44, 0x3E, 0xFF, 0x23, 0xBE, 0x20, 0xFC,
  0xE7, 0x40, 0xC3, 0xC6, 0xFF, 0xCD, 0xF4, 0x01, 0x10, 0xF5, 0x7D, 0xE6,
  0x0F, 0xFE, 0x02, 0x30, 0x64, 0xB7, 0x20, 0x39, 0xF1, 0x38, 0x4B, 0x0E,
  0x02, 0xCD, 0x13, 0x02, 0x40, 0xD1, 0xE1, 0xCD, 0x4E, 0x13, 0xED, 0x53,
  0x5E, 0xFE, 0x22, 0x60, 0xFE, 0xAF, 0x32, 0x4A, 0xFE, 0x21, 0x30, 0x16,
  0x22, 0xD0, 0xFF, 0x3E, 0xFF, 0xD3, 0xF8, 0x3E, 0x60, 0xD3, 0xF8, 0x2E,
  0x60, 0x26, 0x08, 0x22, 0x4C, 0xFE, 0x3E, 0x01, 0x32, 0x62, 0xFE, 0xD3,
  0xE3, 0xD3, 0xFC, 0xFB, 0xC9, 0xF1, 0x30, 0x25, 0x2A, 0x60, 0xFE, 0xED,
  0x5B, 0x5E, 0xFE, 0xCD, 0x4E, 0x13, 0xE7, 0x44, 0xEB, 0xE7, 0x40, 0xC3,
  0xC6, 0xFF, 0x21, 0x6B, 0x1E, 0x11, 0xCF, 0x1F, 0x18, 0xB5, 0x7E, 0xFE,
  0xAA, 0x20, 0x06, 0x1A, 0xFE, 0xAA, 0x20, 0x01, 0xC9, 0x31, 0x8D, 0xFF,
  0xD7, 0x80, 0x21, 0x68, 0x13, 0xCD, 0xD4, 0x01, 0x35, 0xC3, 0x41, 0x10,
  0x79, 0x50, 0x50, 0xFF, 0x39, 0x77, 0x7F, 0x7F, 0xFF, 0xCD, 0xCE, 0x19,
  0x10, 0x7D, 0xE6, 0x0F, 0x4F, 0xCD, 0xEF, 0x15, 0x30, 0xF3, 0x41, 0x04,
  0xDB, 0xE2, 0x1F, 0x10, 0xFD, 0x3F, 0x79, 0x17, 0xD3, 0xE3, 0x18, 0xE5,
  0x0D, 0xCD, 0xB4, 0x19, 0x10, 0xE1, 0x7D, 0xE6, 0x0F, 0xFE, 0x02, 0x30,
  0xC0, 0xB7, 0x20, 0x27, 0x21, 0x3D, 0xFE, 0xAF, 0x77, 0x23, 0x77, 0x23,
  0x77, 0x21, 0x3D, 0xFE, 0xCD, 0x21, 0x12, 0xCD, 0xC3, 0xFF, 0x38, 0xF5,
  0xCD, 0x21, 0x12, 0xCD, 0xC3, 0xFF, 0x30, 0xF8, 0xFE, 0x10, 0xC8, 0xCD,
  0xC6, 0xFF, 0xB7, 0x28, 0xDB, 0x18, 0xE2, 0xD7, 0x60, 0xCD, 0x3D, 0x14,
  0xCD, 0xCE, 0x19, 0x40, 0x54, 0x5D, 0x06, 0x00, 0x38, 0x0E, 0xE7, 0x42,
  0x21, 0xF9, 0xFF, 0xCB, 0xFE, 0xCD, 0xCE, 0x19, 0x20, 0x30, 0xE4, 0x45,
  0xD7, 0x60, 0xCD, 0x34, 0x14, 0x78, 0x3C, 0x32, 0x41, 0xFE, 0xED, 0x53,
  0x42, 0xFE, 0x2A, 0x42, 0xFE, 0xE7, 0x40, 0xCD, 0xC3, 0xFF, 0xFE, 0x10,
  0xC8, 0xFE, 0x11, 0x28, 0xC6, 0x7D, 0xB4, 0x20, 0xED, 0x3A, 0x41, 0xFE,
  0xB7, 0x20, 0xE7, 0xCD, 0x3D, 0x14, 0x62, 0x6B, 0xE7, 0x42, 0x21, 0xF9,
  0xFF, 0xCB, 0xFE, 0x78, 0xDF, 0x20, 0xCD, 0xC6, 0xFF, 0xFE, 0x11, 0x28,
  0xA6, 0xB7, 0x20, 0xC0, 0xCD, 0x34, 0x14, 0xCD, 0xC6, 0xFF, 0xB7, 0x20,
  0xFA, 0xCD, 0x3D, 0x14, 0xCD, 0xC6, 0xFF, 0xB7, 0x28, 0xEE, 0x18, 0xE5,
  0x3E, 0x0B, 0xD3, 0xE3, 0x3E, 0x08, 0xD3, 0xE3, 0xC9, 0x3E, 0x0A, 0xD3,
  0xE3, 0x3E, 0x09, 0xD3, 0xE3, 0xC9, 0xCD, 0x5A, 0x14, 0x30, 0x09, 0x22,
  0x46, 0xFE, 0x21, 0x4E, 0xFE, 0xCB, 0xDE, 0xC9, 0x21, 0x4E, 0xFE, 0xCB,
  0x9E, 0xC9, 0x0E, 0x02, 0xCD, 0xB4, 0x19, 0x20, 0xD1, 0xE1, 0x65, 0x6B,
  0x7C, 0xFE, 0x13, 0xD0, 0x7D, 0xFE, 0x32, 0xC9, 0xCD, 0xB4, 0x19, 0x20,
  0xC1, 0xE1, 0xCD, 0xEF, 0x15, 0x30, 0x0B, 0x65, 0x69, 0x22, 0x44, 0xFE,
  0x21, 0x4E, 0xFE, 0xCB, 0xD6, 0xC9, 0x21, 0x4E, 0xFE, 0xCB, 0x96, 0xC9,
  0x0D, 0xCD, 0x13, 0x02, 0x20, 0xC1, 0x79, 0xFE, 0x03, 0x30, 0x1C, 0xFE,
  0x02, 0x28, 0x1C, 0xB7, 0x20, 0x06, 0xF3, 0x3E, 0x01, 0xD3, 0xE3, 0xC9,
  0xE5, 0xD5, 0x2A, 0x60, 0xFE, 0xED, 0x5B, 0x5E, 0xFE, 0xCD, 0x03, 0x13,
  0xD1, 0xE1, 0xC9, 0x32, 0x4B, 0xFE, 0xC9, 0x3E, 0x80, 0xD3, 0xE3, 0x18,
  0xE2, 0xCD, 0x13, 0x02, 0x20, 0xC1, 0xE1, 0x61, 0x22, 0x48, 0xFE, 0xCD,
  0xA0, 0x14, 0x3E, 0xFF, 0x32, 0x4A, 0xFE, 0x0C, 0x28, 0x0B, 0x21, 0x4C,
  0xFE, 0x7E, 0xDF, 0x20, 0xCD, 0x20, 0x15, 0x18, 0xF5, 0x11, 0x00, 0x00,
  0x21, 0x4C, 0xFE, 0xCD, 0x20, 0x15, 0x1A, 0xCD, 0x75, 0x15, 0x21, 0x4E,
  0xFE, 0xCB, 0x6E, 0x28, 0xEF, 0xCB, 0xAE, 0x13, 0x18, 0xEA, 0xCD, 0x13,
  0x02, 0x40, 0xD1, 0xED, 0x53, 0x69, 0xFE, 0xE1, 0x22, 0x67, 0xFE, 0x4D,
  0x21, 0x00, 0x00, 0x22, 0x65, 0xFE, 0x7B, 0xB2, 0x20, 0x04, 0x79, 0xD3,
  0xE0, 0xC9, 0x21, 0x4C, 0xFE, 0xCD, 0x20, 0x15, 0xF3, 0x2A, 0x63, 0xFE,
  0x2B, 0x7E, 0xCD, 0x75, 0x15, 0xFB, 0x18, 0xEE, 0x3A, 0x3A, 0xFE, 0xB7,
  0xC0, 0x3A, 0x4B, 0xFE, 0x32, 0x3A, 0xFE, 0xCD, 0xC3, 0xFF, 0xFE, 0x10,
  0xCA, 0x3C, 0x10, 0xFE, 0x06, 0xD0, 0xE5, 0xD5, 0x21, 0x47, 0x15, 0x5F,
  0x16, 0x00, 0x19, 0x19, 0x7E, 0x23, 0x66, 0x6F, 0xD1, 0xE3, 0xC9, 0x53,
  0x15, 0x59, 0x15, 0x5F, 0x15, 0x65, 0x15, 0x6B, 0x15, 0x70, 0x15, 0x23,
  0x7E, 0x3D, 0xC8, 0x35, 0xC9, 0x23, 0x7E, 0x3C, 0xC8, 0x34, 0xC9, 0x21,
  0x4E, 0xFE, 0xCB, 0xA6, 0xC9, 0x21, 0x4E, 0xFE, 0xCB, 0xE6, 0xC9, 0x7E,
  0x3D, 0xC8, 0x35, 0xC9, 0x7E, 0x3C, 0xC8, 0x34, 0xC9, 0xE5, 0xC5, 0x06,
  0x08, 0x21, 0xF7, 0xFF, 0x4F, 0x3A, 0x4E, 0xFE, 0xCB, 0x67, 0x79, 0x20,
  0x11, 0xD3, 0xE0, 0x1F, 0x30, 0x08, 0x36, 0x63, 0x23, 0x10, 0xF8, 0xC1,
  0xE1, 0xC9, 0x36, 0x00, 0x18, 0xF6, 0x2F, 0x18, 0xEC, 0xCD, 0x74, 0x19,
  0xC0, 0x2B, 0xCD, 0x84, 0x19, 0xD8, 0xCD, 0xBA, 0x15, 0x20, 0xF6, 0x23,
  0x3E, 0xFF, 0xBE, 0xC8, 0x3D, 0xBE, 0x28, 0xED, 0xCD, 0xCC, 0x15, 0x20,
  0xF2, 0xCD, 0xD8, 0x15, 0x18, 0xED, 0x23, 0xED, 0x5B, 0xF1, 0xFF, 0x7E,
  0x23, 0xB7, 0x28, 0x05, 0xBB, 0xC0, 0x7E, 0xBA, 0xC9, 0x7E, 0xB7, 0xC9,
  0x23, 0xED, 0x5B, 0xEE, 0xFF, 0x7E, 0x23, 0xBB, 0xC0, 0x7E, 0xBA, 0xC9,
  0x2B, 0x2B, 0x4E, 0xCD, 0xEF, 0x15, 0x23, 0x23, 0xD0, 0x79, 0xE6, 0x0F,
  0x47, 0x79, 0x17, 0x17, 0x17, 0x17, 0x78, 0x17, 0xD3, 0xE3, 0xC9, 0x79,
  0xE6, 0xF0, 0x28, 0x06, 0xFE, 0x10, 0x28, 0x02, 0xB7, 0xC9, 0x79, 0xE6,
  0x0F, 0xC8, 0xFE, 0x06, 0xC9, 0x21, 0x4E, 0xFE, 0xCB, 0x56, 0xC8, 0x3A,
  0x45, 0xFE, 0xB7, 0xC0, 0xCB, 0x96, 0x3A, 0x44, 0xFE, 0x4F, 0x18, 0xCD,
  0x21, 0x4E, 0xFE, 0xCB, 0x5E, 0xC8, 0xED, 0x5B, 0xF1, 0xFF, 0x2A, 0x46,
  0xFE, 0xB7, 0xED, 0x52, 0xC0, 0x21, 0x4E, 0xFE, 0xCB, 0x9E, 0x0E, 0x49,
  0xF1, 0xC3, 0xF0, 0x10, 0xF5, 0xE5, 0xD5, 0xCD, 0xD0, 0x17, 0xC5, 0x2A,
  0x60, 0xFE, 0x7E, 0xFE, 0xAA, 0x20, 0x33, 0x2A, 0x5E, 0xFE, 0x7E, 0xFE,
  0xAA, 0x20, 0x2B, 0xCD, 0xBA, 0x17, 0x20, 0x05, 0x21, 0x78, 0x1A, 0x18,
  0x13, 0x2A, 0x5E, 0xFE, 0x11, 0xEF, 0xFF, 0x23, 0x1A, 0xBE, 0x20, 0x1F,
  0x23, 0x1B, 0x1A, 0xBE, 0x13, 0x23, 0x20, 0x17, 0x22, 0x55, 0xFE, 0x3E,
  0x01, 0x32, 0x57, 0xFE, 0x21, 0xA5, 0x16, 0x22, 0xD0, 0xFF, 0xC1, 0xD1,
  0xE1, 0xF1, 0xD3, 0xFC, 0xFB, 0xED, 0x4D, 0xCD, 0x8C, 0x16, 0x30, 0xD7,
  0x3A, 0x4A, 0xFE, 0x3C, 0xC2, 0x72, 0x16, 0x21, 0x48, 0xFE, 0x18, 0xD8,
  0x7E, 0xFE, 0xAA, 0xC8, 0xFE, 0xFF, 0x37, 0xC8, 0x23, 0x7D, 0xB4, 0x20,
  0xF3, 0xF3, 0xC3, 0x59, 0x13, 0x7E, 0xFE, 0xAA, 0xC8, 0xFE, 0xFF, 0x37,
  0xC9, 0xF5, 0xE5, 0xD5, 0xC5, 0x2A, 0x55, 0xFE, 0xCD, 0x9D, 0x16, 0x28,
  0x2D, 0x46, 0xEB, 0x2A, 0x60, 0xFE, 0x23, 0x7E, 0xB8, 0x23, 0x28, 0x07,
  0xCD, 0x8C, 0x16, 0x38, 0x1D, 0x18, 0xF3, 0x7E, 0x32, 0x4C, 0xFE, 0x23,
  0x22, 0x4F, 0xFE, 0x22, 0x51, 0xFE, 0xEB, 0x23, 0x7E, 0x32, 0x53, 0xFE,
  0x23, 0x22, 0x55, 0xFE, 0x21, 0x16, 0x17, 0xC3, 0x6F, 0x16, 0x3E, 0x01,
  0xD3, 0xE3, 0x21, 0x00, 0x20, 0x22, 0x53, 0xFE, 0xAF, 0x32, 0x4A, 0xFE,
  0x21, 0xF2, 0x16, 0xC3, 0x6F, 0x16, 0xF5, 0xE5, 0xD5, 0xC5, 0x2A, 0x53,
  0xFE, 0x2B, 0x22, 0x53, 0xFE, 0x7D, 0xB4, 0x28, 0x0F, 0xCD, 0xC3, 0xFF,
  0x30, 0x04, 0xFE, 0x0E, 0x28, 0x06, 0xCD, 0xBA, 0x17, 0xC2, 0x72, 0x16,
  0x21, 0x30, 0x16, 0xC3, 0x6F, 0x16, 0xF5, 0xE5, 0xD5, 0xC5, 0xCD, 0xC3,
  0xFF, 0x30, 0x23, 0xFE, 0x0F, 0x20, 0x1F, 0xCD, 0xBA, 0x17, 0x20, 0xB6,
  0x3A, 0x5B, 0xFE, 0xB7, 0x28, 0x0D, 0xED, 0x5B, 0x5C, 0xFE, 0xCD, 0xEC,
  0x11, 0xED, 0x53, 0x5C, 0xFE, 0x18, 0xA3, 0x21, 0x4E, 0xFE, 0xCB, 0x8E,
  0x18, 0x9C, 0x21, 0x57, 0xFE, 0x35, 0xC2, 0x72, 0x16, 0x34, 0x2A, 0x4F,
  0xFE, 0xCD, 0x9D, 0x16, 0x20, 0x18, 0x3A, 0x53, 0xFE, 0x3D, 0x32, 0x53,
  0xFE, 0x28, 0x09, 0x2A, 0x51, 0xFE, 0x22, 0x4F, 0xFE, 0xC3, 0x72, 0x16,
  0x21, 0xA5, 0x16, 0xC3, 0x6F, 0x16, 0xCD, 0x9D, 0x17, 0x2A, 0x4F, 0xFE,
  0x23, 0x5E, 0x23, 0x22, 0x4F, 0xFE, 0x21, 0x1D, 0x1A, 0x7E, 0xFE, 0xFF,
  0x28, 0x19, 0xBB, 0x23, 0x23, 0x20, 0xF6, 0x2B, 0x3E, 0xFF, 0xD3, 0xF8,
  0x3A, 0x4C, 0xFE, 0xD3, 0xF8, 0x3E, 0x00, 0xD3, 0xE3, 0x7E, 0x21, 0x4E,
  0xFE, 0xCB, 0xEE, 0x32, 0x57, 0xFE, 0xC3, 0x72, 0x16, 0x5E, 0x21, 0x34,
  0x1A, 0x7E, 0x23, 0x23, 0xFE, 0xFF, 0x28, 0x03, 0xBB, 0x20, 0xF6, 0x2B,
  0x3E, 0x7F, 0xD3, 0xFA, 0x7E, 0xD3, 0xE1, 0xB7, 0x20, 0x01, 0x3C, 0xD3,
  0xFA, 0xC9, 0x3A, 0x4E, 0xFE, 0xE6, 0x02, 0x28, 0x0D, 0x2A, 0xEE, 0xFF,
  0xED, 0x5B, 0x5C, 0xFE, 0x7D, 0xAB, 0xC0, 0x7C, 0xAA, 0xC9, 0x3D, 0xC9,
  0x21, 0x62, 0xFE, 0x35, 0xC0, 0x3A, 0x4D, 0xFE, 0x77, 0x2A, 0x65, 0xFE,
  0x7D, 0xB4, 0x20, 0x0F, 0x2A, 0x67, 0xFE, 0x22, 0x63, 0xFE, 0x2A, 0x69,
  0xFE, 0x22, 0x65, 0xFE, 0x7D, 0xB4, 0xC8, 0xED, 0x5B, 0x63, 0xFE, 0x3A,
  0x4E, 0xFE, 0xCB, 0x67, 0x1A, 0x20, 0x15, 0xD3, 0xE0, 0x13, 0xED, 0x53,
  0x63, 0xFE, 0x2B, 0x22, 0x65, 0xFE, 0x3E, 0xFF, 0xD3, 0xF8, 0x3A, 0x4C,
  0xFE, 0xD3, 0xF8, 0xC9, 0x2F, 0x18, 0xE8, 0xCD, 0x74, 0x19, 0x28, 0x03,
  0xCD, 0xA8, 0x19, 0xCD, 0x74, 0x19, 0x30, 0x2A, 0x0E, 0x48, 0xCD, 0x97,
  0x19, 0xCD, 0x5A, 0x14, 0xEB, 0x38, 0x05, 0xCD, 0x07, 0x1A, 0x18, 0xF0,
  0x0E, 0xFE, 0x2A, 0x6B, 0xFE, 0xCD, 0x84, 0x19, 0x38, 0x27, 0x23, 0x23,
  0x7A, 0xBE, 0x38, 0x1B, 0x20, 0xF3, 0x2B, 0x7B, 0xBE, 0x38, 0x14, 0x20,
  0xEC, 0x2B, 0xCD, 0x4B, 0x19, 0xCD, 0x65, 0x19, 0xFE, 0x0E, 0x20, 0x12,
  0xCD, 0x84, 0x19, 0x38, 0xC2, 0x18, 0xEF, 0x2B, 0x3E, 0xFE, 0xBE, 0x20,
  0xFA, 0xCD, 0x25, 0x19, 0x18, 0xE4, 0xFE, 0x0D, 0x28, 0xB6, 0xFE, 0x0C,
  0x20, 0x17, 0xE5, 0xCD, 0x84, 0x19, 0xD1, 0xD5, 0x7E, 0x12, 0x13, 0x23,
  0xFE, 0xFF, 0x20, 0xF8, 0xE1, 0x7E, 0xFE, 0xFF, 0xCA, 0x13, 0x18, 0x18,
  0xC5, 0xE5, 0x23, 0x23, 0x23, 0xCD, 0x8F, 0x19, 0xC2, 0xE2, 0x18, 0x0E,
  0x5C, 0xCD, 0x97, 0x19, 0xD7, 0x17, 0xCD, 0x65, 0x19, 0xFE, 0x0F, 0x28,
  0xF9, 0xFE, 0x0C, 0x28, 0xF5, 0xFE, 0x0D, 0xE1, 0x20, 0xA4, 0xE5, 0x0E,
  0x5C, 0xCD, 0x97, 0x19, 0xCD, 0x91, 0x12, 0xEB, 0x30, 0x05, 0xCD, 0xEF,
  0x15, 0x38, 0x05, 0xCD, 0x07, 0x1A, 0x18, 0xEB, 0xE1, 0xE5, 0x23, 0x23,
  0x23, 0xCD, 0x8F, 0x19, 0x28, 0x5A, 0x23, 0x23, 0x7A, 0xBE, 0x38, 0x52,
  0x20, 0x4D, 0x2B, 0x7B, 0xBE, 0x38, 0x4C, 0x20, 0x45, 0x2B, 0x7E, 0xE6,
  0x0F, 0x47, 0x79, 0xE6, 0x0F, 0xB8, 0x38, 0x40, 0x20, 0x37, 0xCD, 0x5D,
  0x19, 0xCD, 0x65, 0x19, 0xFE, 0x0F, 0x20, 0x0C, 0x23, 0x23, 0x23, 0xCD,
  0x8F, 0x19, 0x20, 0xEE, 0xE1, 0xC3, 0x85, 0x18, 0xFE, 0x0C, 0x20, 0x11,
  0x54, 0x5D, 0x13, 0x13, 0x13, 0xE5, 0x1A, 0x77, 0x23, 0x13, 0xFE, 0xFF,
  0x20, 0xF8, 0xE1, 0x18, 0xE2, 0xFE, 0x0D, 0x20, 0x04, 0xE1, 0xC3, 0xA6,
  0x18, 0xE1, 0xC3, 0x4A, 0x18, 0x23, 0x23, 0x23, 0x18, 0xA3, 0x2B, 0x2B,
  0xCD, 0x25, 0x19, 0x18, 0xBD, 0xD5, 0xC5, 0xE5, 0x3E, 0xFF, 0xBE, 0x23,
  0x20, 0xFC, 0x2B, 0xEB, 0xE1, 0xE5, 0x7B, 0x95, 0x4F, 0x7A, 0x9C, 0x47,
  0x03, 0x6B, 0x62, 0x13, 0x13, 0x13, 0xED, 0xB8, 0xE1, 0xC1, 0xD1, 0x71,
  0x23, 0x73, 0x23, 0x72, 0x2B, 0x2B, 0xC9, 0x0E, 0x48, 0xCD, 0x97, 0x19,
  0xD7, 0x17, 0x23, 0x23, 0x7E, 0xDF, 0x23, 0x2B, 0x7E, 0xDF, 0x20, 0x2B,
  0xC9, 0x0E, 0x5C, 0xCD, 0x97, 0x19, 0xC3, 0x21, 0x12, 0xCD, 0xC6, 0xFF,
  0xFE, 0x0C, 0x38, 0xF9, 0xFE, 0x10, 0xCA, 0x3C, 0x10, 0x30, 0xF2, 0xC9,
  0x2A, 0x6B, 0xFE, 0x7E, 0xFE, 0xAA, 0xC0, 0x23, 0x3E, 0xFF, 0xBE, 0x37,
  0xC8, 0x3D, 0xBE, 0xC9, 0x23, 0x7E, 0xFE, 0xFE, 0xC8, 0xFE, 0xFF, 0x37,
  0xC8, 0x18, 0xF5, 0x3E, 0xFF, 0xBE, 0x37, 0xC8, 0x3D, 0xBE, 0xC9, 0xD7,
  0x80, 0xCD, 0xAB, 0x01, 0x12, 0xCD, 0xAB, 0x01, 0x15, 0x0E, 0x0D, 0xCD,
  0xE0, 0x01, 0x17, 0xC9, 0x21, 0x80, 0xFE, 0x22, 0x6B, 0xFE, 0x36, 0xAA,
  0x23, 0x36, 0xFF, 0xC9, 0xEF, 0xCD, 0xCF, 0x19, 0xE3, 0xE5, 0x0D, 0x28,
  0x0E, 0x30, 0xF6, 0xC5, 0x0E, 0x08, 0xCD, 0xAC, 0x01, 0xC1, 0xE1, 0xE3,
  0x0C, 0x18, 0xEA, 0xD8, 0x18, 0xF1, 0xEF, 0xCD, 0xF2, 0x19, 0x28, 0xFB,
  0x21, 0x00, 0x00, 0xF5, 0xFE, 0x0A, 0x30, 0x0C, 0xF1, 0x29, 0x29, 0x29,
  0x29, 0xB5, 0x6F, 0xCD, 0xF2, 0x19, 0x18, 0xEF, 0xF1, 0x20, 0xF8, 0xF5,
  0xCD, 0x11, 0x00, 0xF1, 0xC9, 0xEF, 0xC5, 0xCD, 0xC6, 0xFF, 0xF5, 0x4F,
  0x20, 0x06, 0xCD, 0xE1, 0x01, 0xF1, 0xC1, 0xC9, 0xFE, 0x0A, 0x38, 0xF6,
  0xF1, 0x18, 0xEC, 0x21, 0x17, 0x1A, 0xCD, 0xD4, 0x01, 0x50, 0x21, 0x60,
  0xEA, 0x2B, 0x7D, 0xB4, 0x20, 0xFB, 0xC9, 0x79, 0x50, 0x50, 0x5C, 0x50,
  0xFF, 0x64, 0x01, 0x32, 0x02, 0x16, 0x04, 0x08, 0x08, 0x04, 0x10, 0x02,
  0x20, 0x01, 0x40, 0x36, 0x0C, 0x38, 0x18, 0x34, 0x30, 0x31, 0x60, 0xFF,
  0x00, 0x00, 0xA0, 0xFF, 0x0A, 0xF1, 0xB0, 0xE3, 0xC1, 0xD7, 0x1C, 0xCB,
  0xD1, 0xC0, 0x1D, 0xB5, 0xE1, 0xAB, 0xF1, 0xA1, 0x1F, 0x98, 0x91, 0x90,
  0x19, 0x87, 0xA1, 0x80, 0x1A, 0x78, 0xB1, 0x72, 0xC2, 0x6B, 0x2C, 0x65,
  0xD2, 0x5F, 0x2D, 0x5A, 0xE2, 0x55, 0xF2, 0x50, 0x2F, 0x4C, 0x92, 0x47,
  0x29, 0x43, 0xA2, 0x3F, 0x2A, 0x3C, 0xB2, 0x38, 0xC3, 0x35, 0x3C, 0x32,
  0xD3, 0x2F, 0x3D, 0x2D, 0xE3, 0x2A, 0xFF, 0xFF, 0x01, 0x0F, 0xFF, 0xD7,
  0x80, 0x0E, 0x40, 0xCD, 0xAB, 0x01, 0x17, 0x3E, 0x92, 0xD3, 0xE3, 0x3E,
  0x01, 0xD3, 0xE3, 0x21, 0x4E, 0x1C, 0x22, 0xD0, 0xFF, 0x22, 0xD6, 0xFF,
  0x3E, 0xFA, 0x32, 0x0A, 0xFE, 0x3E, 0x01, 0x32, 0x0B, 0xFE, 0xCD, 0xC6,
  0xFF, 0xF5, 0xD7, 0x80, 0x0E, 0x00, 0xCD, 0xE0, 0x01, 0x10, 0xF1, 0xFE,
  0x04, 0x30, 0xCC, 0x21, 0x7B, 0x1A, 0xE5, 0x21, 0xC3, 0x1A, 0x16, 0x00,
  0x5F, 0x19, 0x19, 0x7E, 0x23, 0x66, 0x6F, 0xD3, 0xFC, 0xFB, 0xE9, 0xCB,
  0x1A, 0x02, 0x1D, 0xC8, 0x1C, 0x29, 0x1D, 0xCD, 0x26, 0x1B, 0xCD, 0x41,
  0x1B, 0xAF, 0xD3, 0xE3, 0xDB, 0xE1, 0x17, 0x30, 0xFB, 0x3E, 0x57, 0xD3,
  0xF9, 0x3A, 0x0B, 0xFE, 0xD3, 0xF9, 0xCD, 0xC3, 0xFF, 0x30, 0x0D, 0xFE,
  0x10, 0xC8, 0xD6, 0x0C, 0x28, 0x1A, 0x3D, 0x28, 0x24, 0x3D, 0x28, 0x2E,
  0xDB, 0xE1, 0x17, 0x38, 0xE9, 0xCD, 0x53, 0x1B, 0xCD, 0x26, 0x1B, 0xCD,
  0x95, 0x1B, 0xCD, 0xDD, 0x1B, 0xC3, 0xCB, 0x1A, 0x3E, 0xFA, 0x32, 0x0A,
  0xFE, 0x3E, 0x0A, 0x32, 0x0B, 0xFE, 0xC3, 0xCB, 0x1A, 0x3E, 0xFA, 0x32,
  0x0A, 0xFE, 0x3E, 0x01, 0x32, 0x0B, 0xFE, 0xC3, 0xCB, 0x1A, 0x3E, 0x19,
  0x18, 0xF1, 0x3E, 0x01, 0xD3, 0xE3, 0x3E, 0x47, 0xD3, 0xFA, 0xAF, 0xD3,
  0xFA, 0x3E, 0xC7, 0xD3, 0xFB, 0xAF, 0xD3, 0xFB, 0xE5, 0x21, 0x00, 0x00,
  0x22, 0x08, 0xFE, 0xE1, 0xC9, 0x3E, 0x57, 0xD3, 0xF8, 0x3A, 0x0A, 0xFE,
  0xD3, 0xF8, 0x3E, 0x57, 0xD3, 0xF9, 0x3E, 0x01, 0xD3, 0xF9, 0xC9, 0xDB,
  0xE0, 0xE6, 0x3F, 0x6F, 0xDB, 0xFA, 0xCD, 0x90, 0x1B, 0x67, 0xDB, 0xFB,
  0xCD, 0x90, 0x1B, 0x5F, 0x3A, 0x08, 0xFE, 0x57, 0x7C, 0x0F, 0x0F, 0xE6,
  0xC0, 0xB5, 0x6F, 0x7C, 0x0F, 0x0F, 0xE6, 0x3F, 0x67, 0x7B, 0x0F, 0x0F,
  0xE6, 0xC0, 0xB4, 0x67, 0x7B, 0x0F, 0x0F, 0xE6, 0x3F, 0x5F, 0x7A, 0x0F,
  0x0F, 0xE6, 0xC0, 0xB3, 0x5F, 0x7A, 0x0F, 0x0F, 0xE6, 0x3F, 0x57, 0xC9,
  0xB7, 0xC8, 0xED, 0x44, 0xC9, 0xCD, 0xC2, 0x1B, 0x06, 0xFF, 0xCD, 0xCF,
  0x1B, 0x04, 0xDC, 0xA7, 0x1B, 0x78, 0xFE, 0x1B, 0x38, 0xF4, 0xC9, 0x78,
  0xD9, 0x5F, 0x16, 0x00, 0x21, 0x5C, 0x1C, 0x19, 0x19, 0x19, 0x19, 0x11,
  0x0C, 0xFE, 0x06, 0x04, 0x1A, 0x8E, 0x27, 0x12, 0x13, 0x23, 0x10, 0xF8,
  0xD9, 0xC9, 0xE5, 0x21, 0x0C, 0xFE, 0x06, 0x04, 0xAF, 0x77, 0x23, 0x10,
  0xFC, 0xE1, 0xC9, 0x7A, 0xB7, 0x1F, 0x57, 0x7B, 0x1F, 0x5F, 0x7C, 0x1F,
  0x67, 0x7D, 0x1F, 0x6F, 0xC9, 0x3A, 0x0A, 0xFE, 0xFE, 0x19, 0xCC, 0xF7,
  0x1B, 0xCD, 0x11, 0x1C, 0x3A, 0x0B, 0xFE, 0xFE, 0x0A, 0xC0, 0x3A, 0xF8,
  0xFF, 0xF6, 0x80, 0x32, 0xF8, 0xFF, 0xC9, 0x2A, 0x0C, 0xFE, 0xAF, 0x06,
  0x04, 0x29, 0x8F, 0x10, 0xFC, 0x22, 0x0C, 0xFE, 0x2A, 0x0E, 0xFE, 0x29,
  0x29, 0x29, 0x29, 0xB5, 0x6F, 0x22, 0x0E, 0xFE, 0xC9, 0x0E, 0x00, 0x06,
  0x04, 0x11, 0xFF, 0xFF, 0x21, 0x0F, 0xFE, 0x1B, 0x7E, 0x1F, 0x1F, 0x1F,
  0x1F, 0xCD, 0x37, 0x1C, 0x12, 0x1B, 0x7E, 0xCD, 0x37, 0x1C, 0x12, 0x2B,
  0x10, 0xED, 0x23, 0x7E, 0x0E, 0x01, 0xCD, 0x37, 0x1C, 0x12, 0xC9, 0xE5,
  0x21, 0x18, 0x03, 0xE6, 0x0F, 0x85, 0x6F, 0x7E, 0xE1, 0xFE, 0x3F, 0xC4,
  0x4B, 0x1C, 0x0C, 0x0D, 0xC0, 0xAF, 0xC9, 0x0E, 0x01, 0xC9, 0xE5, 0x2A,
  0x08, 0xFE, 0x23, 0x22, 0x08, 0xFE, 0xD3, 0xFC, 0xE1, 0xFB, 0xED, 0x4D,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,
  0x64, 0x00, 0x00, 0x00, 0x28, 0x01, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00,
  0x12, 0x05, 0x00, 0x00, 0x24, 0x10, 0x00, 0x00, 0x48, 0x20, 0x00, 0x00,
  0x96, 0x40, 0x00, 0x00, 0x92, 0x81, 0x00, 0x00, 0x84, 0x63, 0x01, 0x00,
  0x68, 0x27, 0x03, 0x00, 0x36, 0x55, 0x06, 0x00, 0x72, 0x10, 0x13, 0x00,
  0x44, 0x21, 0x26, 0x00, 0x88, 0x42, 0x52, 0x00, 0x76, 0x85, 0x04, 0x01,
  0x52, 0x71, 0x09, 0x02, 0x04, 0x43, 0x19, 0x04, 0x08, 0x86, 0x38, 0x08,
  0x16, 0x72, 0x77, 0x16, 0x32, 0x44, 0x55, 0x33, 0x64, 0x88, 0x10, 0x67,
  0x21, 0x00, 0x00, 0x22, 0x08, 0xFE, 0xAF, 0xD3, 0xE3, 0xDB, 0xE1, 0x17,
  0x30, 0xFB, 0xCD, 0xC3, 0xFF, 0x30, 0x03, 0xFE, 0x10, 0xC8, 0xDB, 0xE1,
  0x17, 0x38, 0xF3, 0xCD, 0xF2, 0x1C, 0x3E, 0x01, 0xD3, 0xE3, 0xCD, 0x95,
  0x1B, 0xCD, 0x11, 0x1C, 0x18, 0xD6, 0x2A, 0x08, 0xFE, 0xEB, 0xDB, 0xE0,
  0x6F, 0xDB, 0xE1, 0xE6, 0x3F, 0x67, 0xCD, 0x75, 0x1B, 0xC9, 0xCD, 0x26,
  0x1B, 0xAF, 0xD3, 0xE3, 0xCD, 0x53, 0x1B, 0xCD, 0x95, 0x1B, 0xCD, 0x1B,
  0x1D, 0xCD, 0xC3, 0xFF, 0x30, 0xF2, 0xFE, 0x10, 0x20, 0xE8, 0xC9, 0x0E,
  0x01, 0xCD, 0x13, 0x1C, 0x3A, 0xFD, 0xFF, 0xF6, 0x80, 0x32, 0xFD, 0xFF,
  0xC9, 0xCD, 0x26, 0x1B, 0xAF, 0xD3, 0xE3, 0xCD, 0xF2, 0x1C, 0xCD, 0x95,
  0x1B, 0xCD, 0x1B, 0x1D, 0xCD, 0xC3, 0xFF, 0x30, 0xF2, 0xFE, 0x10, 0x20,
  0xE8, 0xC9, 0x21, 0xB3, 0x1D, 0xCD, 0xD4, 0x01, 0x80, 0xCD, 0xF4, 0x01,
  0x24, 0x55, 0xF5, 0x7A, 0xDF, 0x24, 0xF1, 0x30, 0x3A, 0x4A, 0xED, 0x78,
  0xDF, 0x20, 0xCD, 0xC3, 0xFF, 0x30, 0xF6, 0xFE, 0x10, 0x28, 0xDF, 0xFE,
  0x11, 0x20, 0xEE, 0x4A, 0xED, 0x78, 0xCD, 0xA8, 0x1D, 0x5F, 0xE7, 0x44,
  0x7B, 0xCD, 0xA8, 0x1D, 0xE7, 0x40, 0xCD, 0xC3, 0xFF, 0x30, 0xEC, 0xFE,
  0x10, 0x28, 0xC3, 0xFE, 0x12, 0x20, 0xE4, 0x21, 0xB3, 0x1D, 0xCD, 0xD4,
  0x01, 0x80, 0x7A, 0xDF, 0x24, 0x18, 0xC6, 0xD7, 0x20, 0x0E, 0x40, 0xCD,
  0xAB, 0x01, 0x20, 0xCF, 0xFE, 0x10, 0x28, 0xA6, 0x30, 0xF1, 0xCD, 0xF8,
  0x01, 0x30, 0xEC, 0x4A, 0xED, 0x69, 0x18, 0xE7, 0x06, 0x04, 0x29, 0x29,
  0x29, 0x87, 0xED, 0x6A, 0x10, 0xF8, 0xC9, 0x6D, 0x39, 0x08, 0x08, 0x0F,
  0x00, 0x00, 0x00, 0xFF, 0x0E, 0x03, 0xCD, 0x13, 0x02, 0x40, 0xC1, 0xD1,
  0xE1, 0x0A, 0xBE, 0x20, 0x07, 0x03, 0xCD, 0x3B, 0x02, 0x30, 0xF6, 0xC9,
  0xC5, 0xE7, 0x43, 0x7E, 0xDF, 0x20, 0xCD, 0xC6, 0xFF, 0xC1, 0x30, 0xED,
  0xC5, 0xE3, 0xE7, 0x43, 0x7E, 0xDF, 0x20, 0xCD, 0xC6, 0xFF, 0xE3, 0xC1,
  0x38, 0xE6, 0x18, 0xDD, 0xCF, 0xD2, 0x87, 0x04, 0xAF, 0x32, 0xA7, 0xFF,
  0xC9, 0x3E, 0x9B, 0xD3, 0xE3, 0xD7, 0x80, 0x3E, 0x40, 0x32, 0xFE, 0xFF,
  0xCD, 0x1C, 0x1E, 0x6F, 0xCD, 0x1C, 0x1E, 0x67, 0xCD, 0x1C, 0x1E, 0x4F,
  0xCD, 0x1C, 0x1E, 0x47, 0xCD, 0x1C, 0x1E, 0x77, 0x23, 0x0B, 0x79, 0xB0,
  0x20, 0xF6, 0x18, 0xD9, 0x16, 0x08, 0xDB, 0xE0, 0x1F, 0x38, 0xFB, 0xDB,
  0xE0, 0x1F, 0x30, 0xFB, 0x3E, 0x5C, 0x32, 0xFE, 0xFF, 0xDB, 0xE0, 0x1F,
  0x1F, 0x7B, 0x1F, 0x5F, 0x15, 0x20, 0xE7, 0x7B, 0xC9, 0xF1, 0xD7, 0x40,
  0xCF, 0x11, 0x00, 0x04, 0x28, 0x0B, 0xCD, 0xF8, 0x01, 0xF5, 0xB7, 0xED,
  0x52, 0xF1, 0x22, 0xA9, 0xFF, 0xDA, 0xA8, 0x04, 0x0E, 0x40, 0xCD, 0xAB,
  0x01, 0x14, 0x06, 0x02, 0xCD, 0xF4, 0x01, 0x40, 0xF5, 0xB7, 0xED, 0x52,
  0xF1, 0xE5, 0x05, 0xDA, 0x96, 0x04, 0x20, 0xF0, 0xC3, 0x87, 0x04, 0xAA,
  0x01, 0x60, 0xE2, 0x08, 0x2D, 0x08, 0xE2, 0x08, 0x2D, 0x08, 0xE2, 0x08,
  0xB1, 0x08, 0xD2, 0x08, 0xC2, 0x08, 0xA1, 0x04, 0x00, 0x08, 0xC1, 0x08,
  0xE1, 0x08, 0xA1, 0x08, 0xB1, 0x04, 0x00, 0x08, 0xE1, 0x08, 0x19, 0x08,
  0xB1, 0x08, 0xC2, 0x04, 0x00, 0x08, 0xE1, 0x08, 0xE2, 0x08, 0x2D, 0x08,
  0xE2, 0x08, 0x2D, 0x08, 0xE2, 0x08, 0xB1, 0x08, 0xD2, 0x08, 0xC2, 0x08,
  0xA1, 0x04, 0x00, 0x08, 0xC1, 0x08, 0xE1, 0x08, 0xA1, 0x08, 0xB1, 0x04,
  0x00, 0x08, 0xE1, 0x08, 0xC2, 0x08, 0xB1, 0x08, 0xA1, 0x04, 0x00, 0x04,
  0xAA, 0x02, 0x60, 0xC2, 0x04, 0xD2, 0x08, 0xC2, 0x08, 0xA1, 0x04, 0x00,
  0x64, 0xA1, 0x04, 0x1A, 0x64, 0xA1, 0x08, 0x91, 0x08, 0xA1, 0x08, 0x1A,
  0x08, 0xA1, 0x38, 0x00, 0x08, 0x1A, 0x04, 0x91, 0x08, 0xC2, 0x08, 0xA1,
  0x38, 0x00, 0x08, 0xF1, 0x04, 0xD1, 0x08, 0x91, 0x08, 0xC1, 0x38, 0x00,
  0x01, 0xAA, 0x03, 0x60, 0xE2, 0x02, 0xA1, 0x08, 0xB1, 0x08, 0xC2, 0x08,
  0xD2, 0x08, 0xE2, 0x38, 0xC2, 0x08, 0xE2, 0x38, 0xC2, 0x08, 0xE2, 0x38,
  0xA1, 0x08, 0xC2, 0x08, 0xA1, 0x08, 0xF1, 0x08, 0xC2, 0x08, 0xA1, 0x02,
  0xA1, 0x08, 0xD2, 0x08, 0xC2, 0x08, 0xB1, 0x08, 0xE2, 0x02, 0xA1, 0x08,
  0xB1, 0x08, 0xC2, 0x08, 0xD2, 0x08, 0xE2, 0x38, 0xC2, 0x08, 0xE2, 0x38,
  0xC2, 0x08, 0xE2, 0x38, 0xA1, 0x08, 0xC2, 0x08, 0xA1, 0x08, 0xF1, 0x08,
  0xC2, 0x08, 0xA1, 0x34, 0x00, 0x01, 0xAA, 0x04, 0x60, 0xC2, 0x34, 0xB1,
  0x08, 0xC2, 0x08, 0xD2, 0x08, 0xC2, 0x08, 0xB1, 0x08, 0xA1, 0x08, 0xC2,
  0x04, 0x00, 0x64, 0xC2, 0x08, 0xA1, 0x08, 0xC2, 0x34, 0xB1, 0x08, 0xC2,
  0x08, 0xA1, 0x08, 0x91, 0x08, 0xE1, 0x08, 0xF1, 0x08, 0x91, 0x34, 0x91,
  0x08, 0xA1, 0x08, 0xB1, 0x08, 0xA1, 0x08, 0x91, 0x08, 0xF1, 0x08, 0xE1,
  0x08, 0xD1, 0x08, 0xE1, 0x08, 0xD1, 0x08, 0xC1, 0x02, 0x00, 0x64, 0xC1,
  0x08, 0xD1, 0x08, 0xE1, 0x04, 0xF1, 0x04, 0xD1, 0x02, 0x00, 0x01, 0xAA,
  0x05, 0x69, 0xE1, 0x04, 0xA1, 0x08, 0xB1, 0x08, 0xC2, 0x04, 0xA1, 0x04,
  0xB1, 0x04, 0x19, 0x04, 0xA1, 0x02, 0xE1, 0x04, 0xA1, 0x08, 0xB1, 0x08,
  0xC2, 0x04, 0xD2, 0x04, 0xE2, 0x02, 0xD2, 0x02, 0x91, 0x04, 0xC2, 0x08,
  0xD2, 0x08, 0xE2, 0x04, 0xD2, 0x04, 0xC2, 0x04, 0xB1, 0x04, 0xA1, 0x02,
  0x00, 0x64, 0xA1, 0x04, 0xD2, 0x08, 0xE2, 0x08, 0xF2, 0x04, 0xD2, 0x04,
  0xC2, 0x02, 0xB1, 0x02, 0x00, 0x01, 0xFF, 0xAA, 0x12, 0x00, 0x05, 0x01,
  0x03, 0x01, 0xAA, 0x16, 0x00, 0x04, 0x01, 0xAA, 0x17, 0x00, 0x01, 0x02,
  0xAA, 0x18, 0x00, 0x02, 0x01, 0x01, 0x02, 0xAA, 0x19, 0x00, 0x03, 0x01,
  0x04, 0x01, 0xAA, 0x20, 0x00, 0x02, 0x01, 0x04, 0x01, 0xAA, 0x21, 0x00,
  0x01, 0x02, 0xAA, 0x22, 0x00, 0x05, 0x01, 0xFF
};

const byte * const flahBootTable[1] PROGMEM = {boot_A_}; // Payload pointers table (flash)

// ------------------------------------------------------------------------------
//
//  Global variables
//
// ------------------------------------------------------------------------------

// General purpose variables
byte          ioAddress;                  // Virtual I/O address. Only two possible addresses are valid (0x00 and 0x01)
byte          ioData;                     // Data byte used for the I/O operation
byte          ioOpcode       = 0xFF;      // I/O operation code or Opcode (0xFF means "No Operation")
word          ioByteCnt;                  // Exchanged bytes counter during an I/O operation
byte          tempByte;                   // Temporary variable (buffer)
//byte          moduleGPIO     = 0;         // Set to 1 if the module is found, 0 otherwise
byte          bootMode       = 0;         // Set the program to boot (from flash or SD)
byte *        BootImage;                  // Pointer to selected flash payload array (image) to boot
word          BootImageSize  = 0;         // Size of the selected flash payload array (image) to boot
word          BootStrAddr;                // Starting address of the selected program to boot (from flash or SD)
byte          Z80IntEnFlag   = 0;         // Z80 INT_ enable flag (0 = No INT_ used, 1 = INT_ used for I/O)
unsigned long timeStamp;                  // Timestamp for led blinking
char          inChar;                     // Input char from serial
byte          iCount;                     // Temporary variable (counter)
byte          clockMode;                  // Z80 clock HI/LO speed selector (0 = 8/10MHz, 1 = 4/5MHz)
// ------------------------------------------------------------------------------

// DS3231 RTC variables
byte          foundRTC;                   // Set to 1 if RTC is found, 0 otherwise
//seconds, minutes, hours, dayOfWeek, day, month, year;
byte          time[7];

void readRTC()
// Read current date/time binary values from the DS3231 RTC
{
  Wire.beginTransmission(DS3231_RTC);
  Wire.write(DS3231_SECRG);                       // Set the DS3231 Seconds Register
  Wire.endTransmission();
  // Read from RTC
  Wire.requestFrom(DS3231_RTC, 7);
  for (byte i = 0; i < 7; i++)
  {
    time[i] = Wire.read();
  }
}

void sendTime()
{
  digitalWrite(RAM_CE2, LOW);         // Force the RAM in HiZ (CE2 = LOW)
  loadHL(CA80_SEC);                   // Set Z80 HL = SEC (used as pointer to RAM);
  {
    Serial.print("Ustawianie czasu...");
    for (word i = 0; i < 7; i++)
    {
      loadByteToRAM(time[i]);         // Write current data byte into RAM
    }
  }
}

void setup()
{
  // ------------------------------------------------------------------------------
  //
  //  Local variables
  //
  // ------------------------------------------------------------------------------

  byte          data;                       // External RAM data byte
  word          address;                    // External RAM current address;
  char          minBootChar   = '1';        // Minimum allowed ASCII value selection (boot selection)
  char          maxSelChar    = '8';        // Maximum allowed ASCII value selection (boot selection)
  byte          maxBootMode   = 4;          // Default maximum allowed value for bootMode [0..4]
  byte          bootSelection = 0;          // Flag to enter into the boot mode selection

  // ------------------------------------------------------------------------------

  Wire.begin();                                   // Wake up I2C bus
  Serial.begin(115200);
  //Serial.println("\033[?25l");  //ANSI CURSOR INVISIBLE
  //Serial.println("\033[2J");  //ANSI CLEAR SCREEN

  // ----------------------------------------
  // INITIALIZATION
  // ----------------------------------------

  // Initialize RESET_ and WAIT_RES_
  pinMode(RESET_, OUTPUT);                        // Configure RESET_ and set it ACTIVE
  digitalWrite(RESET_, LOW);
  pinMode(WAIT_RES_, OUTPUT);                     // Configure WAIT_RES_ and set it ACTIVE to reset the WAIT FF (U1C/D)
  digitalWrite(WAIT_RES_, LOW);
  pinMode(WAIT_EN, OUTPUT);                     // Configure WAIT_EN and set it ACTIVE
  digitalWrite(WAIT_EN, LOW);

  // Check USER Key for boot mode changes
  pinMode(USER, INPUT_PULLUP);                    // Read USER Key to enter into the boot mode selection
  if (!digitalRead(USER)) bootSelection = 1;

  // Initialize USER,  INT_, RAM_CE2, and BUSREQ_
  pinMode(USER, OUTPUT);                          // USER led OFF
  digitalWrite(USER, HIGH);
  pinMode(INT_, INPUT_PULLUP);                    // Configure INT_ and set it NOT ACTIVE
  //pinMode(INT_, OUTPUT);
  //digitalWrite(INT_, HIGH);
  pinMode(RAM_CE2, OUTPUT);                       // Configure RAM_CE2 as output
  digitalWrite(RAM_CE2, HIGH);                    // Set RAM_CE2 HZ
  pinMode(WAIT_, INPUT);                          // Configure WAIT_ as input
  pinMode(BUSREQ_, INPUT_PULLUP);                 // Set BUSREQ_ HIGH
  pinMode(BUSREQ_, OUTPUT);
  digitalWrite(BUSREQ_, HIGH);

  // Initialize D0-D7, AD0, MREQ_, RD_ and WR_
  DDRA = 0x00;                                    // Configure Z80 data bus D0-D7 (PA0-PA7) as input with pull-up
  PORTA = 0xFF;
  pinMode(MREQ_, INPUT_PULLUP);                   // Configure MREQ_ as input with pull-up
  pinMode(RD_, INPUT_PULLUP);                     // Configure RD_ as input with pull-up
  pinMode(WR_, INPUT_PULLUP);                     // Configure WR_ as input with pull-up
  pinMode(AD0, INPUT_PULLUP);

  // Initialize the Logical RAM Bank (32KB) to map into the lower half of the Z80 addressing space
 // pinMode(BANK0, OUTPUT);                         // Set RAM Logical Bank 1 (Os Bank 0)
 // digitalWrite(BANK0, HIGH);
 // pinMode(BANK1, OUTPUT);
 // digitalWrite(BANK1, LOW);

  // Initialize CLK (single clock pulses mode) and reset the Z80 CPU
  pinMode(CLK, OUTPUT);                           // Set CLK as output
  digitalWrite(CLK, LOW);
  singlePulsesResetZ80();                         // Reset the Z80 CPU using single clock pulses

  // Initialize MCU_RTS and MCU_CTS and reset uTerm (A071218-R250119) if present
  pinMode(MCU_CTS_, OUTPUT);                      // Blokada NMI i INT w CA80
  digitalWrite(MCU_CTS_, HIGH);
  pinMode(MCU_RTS_, OUTPUT);
  digitalWrite(MCU_RTS_, LOW);                    // Reset uTerm (A071218-R250119)
  delay(100);
  digitalWrite(MCU_RTS_, HIGH);
  delay(500);

  // Read the Z80 CPU speed mode
  if (EEPROM.read(clockModeAddr) > 1)             // Check if it is a valid value, otherwise set it to low speed
    // Not a valid value. Set it to low speed
  {
    EEPROM.update(clockModeAddr, 1);
  }
  clockMode = EEPROM.read(clockModeAddr);         // Read the previous stored value

  // Print some system information
  //Serial.begin(115200);
  Serial.println(F("\r\n\nZ80-MBC2 - CA80 MONITOR loader\r\n"));

  // Print the Z80 clock speed mode
  Serial.print(F("IOS: Z80 clock set at "));
  if (clockMode) Serial.print(CLOCK_LOW);
  else Serial.print(CLOCK_HIGH);
  Serial.println("MHz");

  while (Serial.available() > 0) Serial.read();   // Flush serial Rx buffer
  //Serial.println(F("\r\nPress any key to run."));
  //while (Serial.available() < 1); // Wait a key
  digitalWrite(RAM_CE2, LOW);         // Force the RAM in HiZ (CE2 = LOW)

  BootImage = (byte *) pgm_read_word (&flahBootTable[0]);
  BootImageSize = sizeof(boot_A_);
  BootStrAddr = boot_A_StrAddr;

  // Execute the load of the selected file on SD or image on flash
  loadHL(BootStrAddr);                            // Set Z80 HL = boot starting address (used as pointer to RAM);
  //
  // DEBUG ----------------------------------
  if (debug)
  {
    Serial.print("DEBUG: Flash BootImageSize = ");
    Serial.println(BootImageSize);
    Serial.print("DEBUG: BootStrAddr = ");
    Serial.println(BootStrAddr, HEX);
  }
  // DEBUG END ------------------------------
  // Load from flash
  {

    Serial.print("Programowanie...");
    digitalWrite(USER, LOW);

    for (word i = 0; i < BootImageSize; i++)
      // Write boot program into external RAM
    {
      loadByteToRAM(pgm_read_byte(BootImage + i));  // Write current data byte into EEPROM
    }
  }
  readRTC();
  sendTime();
  Serial.println(" Done.");
  digitalWrite(USER, HIGH);
  // ----------------------------------------
  // Z80 BOOT
  // ----------------------------------------

  digitalWrite(RESET_, LOW);                      // Activate the RESET_ signal

  // Initialize CLK @ 4/8MHz (@ Fosc = 16MHz). Z80 clock_freq = (Atmega_clock) / ((OCR2 + 1) * 2)
  ASSR &= ~(1 << AS2);                            // Set Timer2 clock from system clock
  TCCR2 |= (1 << CS20);                           // Set Timer2 clock to "no prescaling"
  TCCR2 &= ~((1 << CS21) | (1 << CS22));
  TCCR2 |= (1 << WGM21);                          // Set Timer2 CTC mode
  TCCR2 &= ~(1 << WGM20);
  TCCR2 |= (1 <<  COM20);                         // Set "toggle OC2 on compare match"
  TCCR2 &= ~(1 << COM21);
  OCR2 = clockMode;                               // Set the compare value to toggle OC2 (0 = low or 1 = high)
  pinMode(CLK, OUTPUT);                           // Set OC2 as output and start to output the clock
  Serial.println("IOS: Z80 is running from now");
  Serial.println();

  // Flush serial Rx buffer
  while (Serial.available() > 0)
  {
    Serial.read();
  }

  // Leave the Z80 CPU running
  delay(1);                                       // Just to be sure...
  digitalWrite(RESET_, HIGH);                     // Release Z80 from reset and let it run
  delay(5);                                       // Dla pewnosci zamiast SNMI_ (MCU_CTS)
  // TIMER1 ustawiamy na 1000 Hz:
  TCCR1A = 0;                                     // zerujemy TCCR1A 
  TCCR1A |= (1 << COM1B0) | (1 << FOC1B);         // PD4 500 Hz NMI
  TCCR1B = 0;                                     // zerujemy TCCR1B
  TCNT1  = 0;                                     // zerujemy licznik
  //  1000 Hz 
  OCR1A = 15999; // = 16000000 / (1 * 1000) - 1 (must be <65536)
  OCR1B = 15000; // wartosc prawie dowolna
  // CTC mode
  TCCR1B |= (1 << WGM12);
  // ustawiamy prescaler
  TCCR1B |= (0 << CS12) | (0 << CS11) | (1 << CS10);
  pinMode(NMI, OUTPUT);                           // PD4 jako wyjscie
  
  //digitalWrite(MCU_CTS_, LOW);                    // Odblokowanie NMI i INT
}

// ------------------------------------------------------------------------------

void loop()
{

}


// ------------------------------------------------------------------------------

// Z80 bootstrap routines

// ------------------------------------------------------------------------------

#define CLK_HIGH    PORTD |= B10000000
#define CLK_LOW     PORTD &= B01111111
#define RAM_CE_HIGH PORTB |= B00000100
#define RAM_CE_LOW  PORTB &= B11111011

void pulseClock(byte numPulse)
// Generate <numPulse> clock pulses on the Z80 clock pin.
// The steady clock level is LOW, e.g. one clock pulse is a 0-1-0 transition
{
  byte    i;
  for (i = 0; i < numPulse; i++)
    // Generate one clock pulse
  {
    // Send one impulse (0-1-0) on the CLK output
    CLK_HIGH;         //Bylo: digitalWrite(CLK, HIGH);  //CLK_HIGH;         //Bylo:
    CLK_LOW;          //      digitalWrite(CLK, LOW);   //CLK_LOW;          //
  }
}


// ------------------------------------------------------------------------------

void loadByteToRAM(byte value)
// Load a given byte to RAM using a sequence of two Z80 instructions forced on the data bus.
// The RAM_CE2 signal is used to force the RAM in HiZ, so the Atmega can write the needed instruction/data
//  on the data bus. Controlling the clock signal and knowing exactly how many clocks pulse are required it
//  is possible control the whole loading process.
// In the following "T" are the T-cycles of the Z80 (See the Z80 datashet).
// The two instruction are "LD (HL), n" and "INC (HL)".
{

  // Execute the LD(HL),n instruction (T = 4+3+3). See the Z80 datasheet and manual.
  // After the execution of this instruction the <value> byte is loaded in the memory address pointed by HL.
  pulseClock(1);                      // Execute the T1 cycle of M1 (Opcode Fetch machine cycle)
  RAM_CE_LOW; //digitalWrite(RAM_CE2, !LOW);         // Force the RAM in HiZ (CE2 = LOW)
  DDRA = 0xFF;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as output
  PORTA = LD_HL;                      // Write "LD (HL), n" opcode on data bus
  pulseClock(2);                      // Execute T2 and T3 cycles of M1
  DDRA = 0x00;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as input...
  PORTA = 0xFF;                       // ...with pull-up
  pulseClock(2);                      // Complete the execution of M1 and execute the T1 cycle of the following
  // Memory Read machine cycle
  DDRA = 0xFF;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as output
  PORTA = value;                      // Write the byte to load in RAM on data bus
  pulseClock(2);                      // Execute the T2 and T3 cycles of the Memory Read machine cycle
  DDRA = 0x00;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as input...
  PORTA = 0xFF;                       // ...with pull-up
  RAM_CE_HIGH;                        // Enable the RAM again (CE2 = HIGH)
  pulseClock(3);                      // Execute all the following Memory Write machine cycle
  // Execute the INC(HL) instruction (T = 6). See the Z80 datasheet and manual.
  // After the execution of this instruction HL points to the next memory address.
  pulseClock(1);                      // Execute the T1 cycle of M1 (Opcode Fetch machine cycle)
  RAM_CE_LOW;                         // Force the RAM in HiZ (CE2 = LOW)
  DDRA = 0xFF;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as output
  PORTA = INC_HL;                     // Write "INC(HL)" opcode on data bus
  pulseClock(2);                      // Execute T2 and T3 cycles of M1
  DDRA = 0x00;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as input...
  PORTA = 0xFF;                       // ...with pull-up
  RAM_CE_HIGH;   //digitalWrite(RAM_CE2, HIGH);        // Enable the RAM again (CE2 = HIGH)
  pulseClock(3);                      // Execute all the remaining T cycles
}

// ------------------------------------------------------------------------------

void loadHL(word value)
// Load "value" word into the HL registers inside the Z80 CPU, using the "LD HL,nn" instruction.
// In the following "T" are the T-cycles of the Z80 (See the Z80 datashet).
{
  // Execute the LD dd,nn instruction (T = 4+3+3), with dd = HL and nn = value. See the Z80 datasheet and manual.
  // After the execution of this instruction the word "value" (16bit) is loaded into HL.
  pulseClock(1);                      // Execute the T1 cycle of M1 (Opcode Fetch machine cycle)
  RAM_CE_LOW;                         // Force the RAM in HiZ (CE2 = LOW)
  DDRA = 0xFF;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as output
  PORTA = LD_HLnn;                    // Write "LD HL, n" opcode on data bus
  pulseClock(2);                      // Execute T2 and T3 cycles of M1
  DDRA = 0x00;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as input...
  PORTA = 0xFF;                       // ...with pull-up
  pulseClock(2);                      // Complete the execution of M1 and execute the T1 cycle of the following
  // Memory Read machine cycle
  DDRA = 0xFF;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as output
  PORTA = lowByte(value);             // Write first byte of "value" to load in HL
  pulseClock(3);                      // Execute the T2 and T3 cycles of the first Memory Read machine cycle
  // and T1, of the second Memory Read machine cycle
  PORTA = highByte(value);            // Write second byte of "value" to load in HL
  pulseClock(2);                      // Execute the T2 and T3 cycles of the second Memory Read machine cycle
  DDRA = 0x00;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as input...
  PORTA = 0xFF;                       // ...with pull-up
  RAM_CE_HIGH;                        // Enable the RAM again (CE2 = HIGH) (Dla EEPROM /CE)
}

// ------------------------------------------------------------------------------

void singlePulsesResetZ80()
// Reset the Z80 CPU using single pulses clock
{
  digitalWrite(RESET_, LOW);          // Set RESET_ active
  pulseClock(6);                      // Generate twice the needed clock pulses to reset the Z80
  digitalWrite(RESET_, HIGH);         // Set RESET_ not active
  pulseClock(2);                      // Needed two more clock pulses after RESET_ goes HIGH
}

